{"hash":"5abe2a8ef85f120b7852017f9331817ea0ec6e83","data":{"tag":{"title":"Vue.js","belongsTo":{"edges":[{"node":{"title":"Gridsome으로 Blog 만들기 (2) - 포스트 작성","path":"/blog/make-blog-with-gridsome-2/","date":"11. November 2020","timeToRead":0,"description":"Gridsome 프로젝트에 첫 포스트를 생성하고 문제점을 해결한다.","content":"\n"}},{"node":{"title":"Gridsome으로 Blog 만들기 (1) - 환경 설정","path":"/blog/make-blog-with-gridsome-1/","date":"10. November 2020","timeToRead":6,"description":"Vue.js 기반 정적 사이트 생성기(Static Site Generator, SSG)인 Gridsome을 이용해 프로젝트를 생성하고 초기 개발 환경을 구성한다.","content":"<h1 id=\"prerequisite\"><a href=\"#prerequisite\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Prerequisite</h1>\n<ul>\n<li>NodeJS</li>\n<li>Npm or Yarn</li>\n</ul>\n<hr>\n<h1 id=\"gridsome-설치\"><a href=\"#gridsome-%EC%84%A4%EC%B9%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><a href=\"https://gridsome.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Gridsome</a> 설치</h1>\n<pre><code class=\"language-bash\"># Npm\n$ npm install -g gridsome\n\n# Yarn\n$ yarn global add gridsome\n</code></pre>\n<hr>\n<h1 id=\"프로젝트-생성\"><a href=\"#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%83%9D%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>프로젝트 생성</h1>\n<p>기본 프로젝트로 생성하면 설정들을 일일이 해나가는 번거로움이 있다.</p>\n<p>Gridsome 공식페이지에 제공하는 <a href=\"https://gridsome.org/starters/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">스타터</a>를 이용하면 개발을 쉽게 시작할 수 있다.</p>\n<p>본인은 의도한 형태와 가장 유사한 <a href=\"https://gridsome.org/starters/bulma-starter/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Bulma Starter</a>로 시작하려 한다.</p>\n<pre><code class=\"language-bash\">$ gridsome create go2zo.github.io https://github.com/calebanthony/gridsome-bulma.git\n</code></pre>\n<hr>\n<h1 id=\"디렉토리-구조\"><a href=\"#%EB%94%94%EB%A0%89%ED%86%A0%EB%A6%AC-%EA%B5%AC%EC%A1%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>디렉토리 구조</h1>\n<p>Gridsome의 기본 디렉토리 구조는 다음과 같다.</p>\n<pre><code>.\n├── package.json\n├── gridsome.config.js\n├── gridsome.server.js\n├── static/\n└── src/\n    ├── main.js\n    ├── index.html\n    ├── App.vue\n    ├── layouts/\n    │   └── Default.vue\n    ├── pages/\n    │   ├── Index.vue\n    │   └── Blog.vue\n    └── templates/\n        └── BlogPost.vue\n</code></pre>\n<p>우선 크게 건드릴 필요 없는 것들은 제외하고 설명하면 다음과 같다. 자세한 설명은 공식문서에 잘 나와있다.</p>\n<ul>\n<li><strong>gridsome.config.js</strong>: 플러그인 설정 등 Gridsome 프로젝트에 대한 설정을 다룬다.</li>\n<li><strong>src/layout</strong>: 페이지나 템플릿에서 사용하는 레이아웃 컴포넌트들을 구현한다.</li>\n<li><strong>src/pages</strong>: 이 디렉토리의 컴포넌트들은 각각 웹사이트의 url 된다. 가령 <code>src/pages/Index.vue</code>는 홈페이지가 되고 <code>src/pages/AboutUs.vue</code>는 <code>hostname/about-us</code>가 된다.</li>\n<li><strong>src/templates</strong>: 템플릿은 collection 노드들에 대한 단일 페이지를 생성한다. 가령 포스트(md파일)가 웹페이지로 변환될 때 해당하는 템플릿을 이용하게 된다.</li>\n</ul>\n<h1 id=\"블로그-확인\"><a href=\"#%EB%B8%94%EB%A1%9C%EA%B7%B8-%ED%99%95%EC%9D%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>블로그 확인</h1>\n<p>로컬 환경에서 웹서비스를 띄워 생성된 블로그를 확인한다.</p>\n<p><code>gridsome develop</code>이나 <code>yarn develop</code>으로 실행한다.</p>\n<pre><code class=\"language-bash\">$ gridsome develop\n\n DONE  Compiled successfully in 978ms\n \n  Site running at:\n  - Local:                 http://localhost:8080/\n  - Network:               http://192.168.219.106:8080/\n   \n  Explore GraphQL data at: http://localhost:8080/___explore\n</code></pre>\n<p>접속하여 페이지가 정상적으로 뜨면 성공이다.</p>\n<h1 id=\"eslint-설정\"><a href=\"#eslint-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Eslint 설정</h1>\n<p>Gridsome을 위한 Eslint <a href=\"https://eslint.gridsome.org/user-guide/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">플러그인</a>이 있다.</p>\n<blockquote>\n<p>처음 연습 시 <a href=\"https://gridsome.org/starters/gridsome-blog-starter/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Gridsome Blog Starter</a>를 사용했었는데 해당 스타터는 eslint 설정이 되어있지 않아 직접 설정했다. <a href=\"https://gridsome.org/starters/bulma-starter/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Bulma Starter</a>는 eslint 설정이 아래 나와있는 것보다 더 잘 되어있어 추가적으로 수정한 부분은 <code>.eslintignore</code> 뿐이다.</p>\n<p>만약 스타터를 이용하지 않거나 선택한 스타터에 eslint 설정이 되어있지 않다면 참조하면 될 듯 하다.</p>\n</blockquote>\n<h2 id=\"dependencies-설치\"><a href=\"#dependencies-%EC%84%A4%EC%B9%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Dependencies 설치</h2>\n<pre><code class=\"language-bash\"># Npm\n$ npm install eslint eslint-plugin-gridsome vue-eslint-parser -D\n\n# Yarn\n$ yarn add eslint eslint-plugin-gridsome vue-eslint-parser -D\n</code></pre>\n<blockquote>\n<p><code>eslint-plugin-gridsome</code>은 <code>vue-eslint-parser@^6.0.4</code> 버전 이상을 사용하고 있다.</p>\n<p>다른 eslint 플러그인을 사용하는 경우 <code>vue-eslint-parser</code> 버전을 주의해야 한다.</p>\n</blockquote>\n<h2 id=\"eslintrcjs-설정\"><a href=\"#eslintrcjs-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>.eslintrc.js 설정</h2>\n<p><a href=\"https://github.com/gridsome/eslint-plugin-gridsome/blob/45395586e812167f1c1eb7e9c02d4e4a86b2b9ff/lib/configs/recommended.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">gridsome/recommended</a> 문서를 참고하여 작성하였다.</p>\n<pre><code class=\"language-js\">// .eslintrc.js\nmodule.exports = {\n  parser: \"vue-eslint-parser\",\n  parserOptions: {\n    ecmaVersion: 2018,\n    sourceType: \"module\",\n    ecmaFeatures: {\n      jsx: true\n    }\n  },\n  env: {\n    browser: true,\n    es6: true\n  },\n  extends: [\"plugin:gridsome/recommended\"],\n};\n</code></pre>\n<h2 id=\"packagejson-설정\"><a href=\"#packagejson-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>package.json 설정</h2>\n<p>Eslint 실행을 위한 스크립트를 추가한다.</p>\n<pre><code class=\"language-json\">// package.json\n{\n  \"scripts\": {\n    \"lint\": \"eslint --ext .js,.vue src/\",\n  },\n}\n</code></pre>\n<h2 id=\"eslintignore-설정\"><a href=\"#eslintignore-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>.eslintignore 설정</h2>\n<p>기본 생성되는 <code>main.js</code> 파일은 eslint에서 에러를 유발한다. Rule을 변경하기에는 애매하여 제외하도록 설정했다. 명령어에서 추가할 수 있지만 향후 예외 파일이 추가될 가능성이 있기 때문에 <code>.eslintignore</code>를 이용했다.</p>\n<pre><code class=\"language-js\">// .eslintignore\nsrc/main.js\n</code></pre>\n<h1 id=\"dev-tools-설정\"><a href=\"#dev-tools-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Dev Tools 설정</h1>\n<p>Gridsome 프로젝트를 진행하기 위해 아래와 같이 두개의 에디터를 사용한다.</p>\n<ul>\n<li><a href=\"https://code.visualstudio.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Visual Studio Code</a>: 프로젝트 전체적인 관리</li>\n<li><a href=\"https://typora.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Typora</a>: Markdown 편집</li>\n</ul>\n<blockquote>\n<p>VS Code로도 마크다운 편집이 가능하지만 개인적으로 마크다운 에디터는 Typora를 선호한다. 두개의 에디터를 사용하면 사소한 불편사항이 생기긴 한다. 가령 VSCode에서 디렉토리를 변경하게 되면 Typora는 반영이 되지 않아 재부팅을 해줘야 한다. 혹은 실수로 양쪽에서 동일한 md 파일을 동시에 수정하는 불상사가 생길 수 있지만 크게 우려할 정도는 아닌것 같다.</p>\n</blockquote>\n<h2 id=\"vscode-설정\"><a href=\"#vscode-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>VSCode 설정</h2>\n<blockquote>\n<p>설치는 VSCode의 Extensions 탭에서 검색 후 설치하면 된다.</p>\n</blockquote>\n<h3 id=\"vetur\"><a href=\"#vetur\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Vetur</h3>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=octref.vetur\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Vetur</a>는 VSCode를 위한 Vue 도구이다.</p>\n<p>Vue 기반인 Gridsome과 완벽히 동작한다.</p>\n<h3 id=\"graphql\"><a href=\"#graphql\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>GraphQL</h3>\n<p><a href=\"https://gridsome.org/docs/data-layer/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GraphQL data layer</a>는 개발 모드에서 사용할 수 있는 도구이다.</p>\n<p>Vue 컴포넌트 내부에서 <code>&#x3C;page-query></code> 또는 <code>&#x3C;static-query></code> 블록으로 쿼리를 작성할 수 있다.</p>\n<p>아래 설정을 통해 .vue파일 내부에 작성된 GraphQL 구문을 분석할 수 있다.</p>\n<ol>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=kumar-harsh.graphql-for-vscode\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GraphQL for VSCode</a> 설치</li>\n<li>Preferences > Settings을 열어 <code>vetur grammar</code> 검색</li>\n</ol>\n<p>![image-20201110173717709](images/image-2020</p>\n<p>1110173717709.png)</p>\n<ol start=\"3\">\n<li><code>settings.json</code>을 열어 아래와 같이 추가</li>\n</ol>\n<pre><code class=\"language-json\">// settings.json\n{\n   \"vetur.grammar.customBlocks\": {\n      \"docs\": \"md\",\n      \"i18n\": \"json\",\n      \"page-query\": \"graphql\",\n      \"static-query\": \"graphql\"\n   }\n}\n</code></pre>\n<ol start=\"4\">\n<li>VSCode Command 실행: <code>Vetur: Generate Grammar</code></li>\n</ol>\n<blockquote>\n<p>단축키 <code>Shift + Ctrl + P</code> (MAC은 <code>Shift + Cmd + P</code>)으로 실행</p>\n</blockquote>\n<h2 id=\"typora-설정\"><a href=\"#typora-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Typora 설정</h2>\n<p>캡쳐 도구로 <a href=\"https://app.prntscr.com/en/index.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Lightshot</a>을 사용한다. 캡쳐한 이미지를 클립보드에 복사하여 Typora에 붙여넣으면 자동으로 이미지를 저장한다. (이 외에 업로드 기능도 제공한다.)</p>\n<p>기본적으로 Typora 설치 폴더 하위에 저장하는데 <code>content/posts/images</code> 하위에 저장하도록 설정하였다.</p>\n<p><img src=\"images/image-20201111112515777.png\" alt=\"image-20201111112515777\"></p>\n<h1 id=\"다음은\"><a href=\"#%EB%8B%A4%EC%9D%8C%EC%9D%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>다음은..</h1>\n<p>이번 포스트는 기본적으로 개발환경을 구성하는 부분까지만 다뤘다.</p>\n<p>다음에는 새로운 포스트를 작성하고 깃허브 페이지에 배포하는 것을 다루도록 한다.</p>\n"}},{"node":{"title":"Blog 새단장","path":"/blog/blog-reopening/","date":"9. November 2020","timeToRead":3,"description":"오랫동안 묵혀둔 블로그를 정리하기 위해 관련 기술들을 알아보았다. Jekyll 다음으로 Hexo를 사용할까 생각하고 있던 와중에 Vue.js 기반 정적 사이트 생성기(Static Site Generator, SSG)인 Gridsome을 알게 되었고 새로이 블로그를 만들기로 했다.","content":"<h1 id=\"묵혀둔-블로그를-꺼내다\"><a href=\"#%EB%AC%B5%ED%98%80%EB%91%94-%EB%B8%94%EB%A1%9C%EA%B7%B8%EB%A5%BC-%EA%BA%BC%EB%82%B4%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>묵혀둔 블로그를 꺼내다.</h1>\n<p>이 이야기는 아주 오래된 이야기이다.</p>\n<p>기존의 블로그는 <a href=\"https://jekyllrb.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Jekyll</a>로 만들어져 있었다. Jekyll은 가끔 테마를 바꾼다던가 플러그인을 손보다가 블로그가 꼬여버리는 일이 종종 있었다. 물론 내가 ruby에 미숙하여 그런 비상상황에 제대로 대처하지 못한 이유가 클 것이다.</p>\n<p>그러다 약 3년전인가..(벌써?) 팀원들이 기술블로그나 만들어볼까 할때 <a href=\"https://hexo.io/index.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Hexo</a>를 주워들었다. 당시 JS에 대한 관심이 커지고 있었고 만든 결과물이 내 블로그에 비해 상당히 마음에 들었던 기억이 있다. 그렇게 관심만 커지고 정작 건들여 볼 생각은 3년간 묵히게 되었다.</p>\n<p>결국 전체 포스트는 손으로 꼽을 정도만 존재하는 허접한 블로그에 대한 이야기였다.</p>\n<hr>\n<h1 id=\"gatsby를-거쳐\"><a href=\"#gatsby%EB%A5%BC-%EA%B1%B0%EC%B3%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Gatsby를 거쳐</h1>\n<blockquote>\n<p>예전에 사용하던 기술들을 대체할 것들은 뭐가 있을까?</p>\n</blockquote>\n<p>개인적으로 가장 쉽게 찾는 방법은 구글에서 <code>Jekyll vs</code>이라고 치면 연관검색어 상위권의 것들을 살펴보는 것이다. 가장 먼저 보인 것이 <code>Jekyll vs Gatsby</code>였다. 몇몇 잘 소개된 글들을 보며 Jekyll을 보내주고 최신 트랜드의 기술을 사용해 보고 싶은 충동이 생겼다.</p>\n<h1 id=\"gridsome을-선택\"><a href=\"#gridsome%EC%9D%84-%EC%84%A0%ED%83%9D\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Gridsome을 선택</h1>\n<p><a href=\"https://www.gatsbyjs.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Gatsby</a>를 보고 가장 혹한 점은 React를 사용한다는 것이다. 사실 React를 직접 접해보지는 않았지만 Vue는 해본지라 그냥 친구의 친구의 친구를 만난 것 같은 반가움이랄까.</p>\n<p>그러나 왠지 Vue가 아니라 아쉬웠다. 혹시나 하며 다시 구글링 해보니 Gatsby와 아주 유사하고 Vue를 기반한 <a href=\"https://gridsome.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Gridsome</a>이 있었다. 구조적으로 Gatsby와 Gridsome은 아주 유사한 기술이었다. React는 해보질 않았고 나는 그냥 단순히 Vue빠였으므로 Gridsome이 선택되었다. 뭔가 각 도구별 비교같은게 있고 Gridsome을 선택한 이유 등이 나와야 할 것 같겠지만 그냥 단순히 Vue를 좋아라하여 선택하게 된 결과이다.</p>\n<p>내년 1월에 이 계획을 시작하지 않아서 다행이다. 신년계획이 <strong>역시나</strong> 작심삼일이 되었다는 놀림은 안 당할테니까.</p>\n"}}]}}},"context":{}}