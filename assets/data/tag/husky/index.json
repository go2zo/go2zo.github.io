{"hash":"12c81b4eaf125a746d2dbc36b277a349e8c9fed6","data":{"tag":{"title":"husky","belongsTo":{"edges":[{"node":{"title":"Lint-staged와 Husky를 이용해 자동화 하기","path":"/lint-staged-and-husky/","date":"14. November 2020","timeToRead":3,"description":"lint-staged와 husky를 이용해 eslint와 커밋 메시지에 issue 번호 지정을 자동화 한다.","content":"<h1 id=\"husky란\"><a href=\"#husky%EB%9E%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><a href=\"https://typicode.github.io/husky/#/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Husky</a>란?</h1>\n<p>Husky는 node 환경에서 git hook 제어를 용이하게 해 주는 툴이다. 기본적으로 git hook은 로컬저장소의 <code>.git/hooks</code> 디렉토리에 위치해 있다. 그리고 이 디렉토리는 git 버전관리의 대상이 아니다. husky는 hook을 공유 가능하도록 해준다.</p>\n<p>husky를 설치하면 모든 git hook은 husky를 실행하도록 설정된다. 실제로 husky를 설치하고 <code>.git/hook</code> 디렉토리를 확인하면 모든 hook 파일들이 활성화(.sample이 붙어있지 않은 파일들) 되어 있는 것을 볼 수 있다. husky에 의해 생성된 파일들은 수동으로 변경하지 않아야 한다(<del>고 알고 있다</del>). 어차피 변경을 해도 변경사항은 공유되지 않을 것이다.</p>\n<p><img src=\"images/image-20201113161622506.png\" alt=\"image-20201113161622506\"></p>\n<h1 id=\"lint-staged--husky-설치\"><a href=\"#lint-staged--husky-%EC%84%A4%EC%B9%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Lint-staged &#x26; Husky 설치</h1>\n<p><a href=\"https://mrm.js.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">mrm</a>은 오픈소스 프로젝트의 환경 설정을 동기화 하기 위한 도구이다. lint-staged도 지원하고 있으며 공식문서에도 아래와 같이 설치하도록 안내하고 있다.</p>\n<pre><code class=\"language-bash\">$ npx mrm lint-staged\n</code></pre>\n<p>어떻게 설치되는지 보려고 package.json에서 lint-staged관련 설정들을 모두 지우고 실행해 봤다. 아래와 같이 <code>pre-commit</code> 시 <code>lint-staged</code>가 실행되도록 설정된 것을 볼 수 있다.</p>\n<pre><code class=\"language-json\">// package.json\n{\n  \"husky\": {\n    \"hooks\": {\n      \"pre-commit\": \"lint-staged\"\n    }\n  },\n  \"lint-staged\": {\n    \"*.{js,vue}\": \"eslint --cache --fix\"\n  }\n}\n</code></pre>\n<h1 id=\"commit-message에-issue-number-자동-삽입\"><a href=\"#commit-message%EC%97%90-issue-number-%EC%9E%90%EB%8F%99-%EC%82%BD%EC%9E%85\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Commit message에 Issue Number 자동 삽입</h1>\n<p>husky를 이용해 npm script만 사용 가능한 것은 아니다.</p>\n<p>쉘 스크립트도 실행 가능하고 복잡한 스크립트는 파일로 따로 작성하여 호출할 수 있다.</p>\n<pre><code class=\"language-json\">// package.json\n{\n  \"husky\": {\n    \"hooks\": {\n      \"pre-commit\": \"lint-staged &#x26;&#x26; your-custom-script.sh\"\n    }\n  }\n}\n</code></pre>\n<p>이를 이용해 commit message에 issue 번호를 삽입하는 기능을 추가해 보려 한다.</p>\n<p>해당 기능은 commit message를 준비하는 과정으로 <code>prepare-commit-msg</code> 훅에 속한다.</p>\n<pre><code class=\"language-json\">// package.json\n{\n  \"husky\": {\n    \"hooks\": {\n      \"pre-commit\": \"lint-staged\",\n      \"prepare-commit-msg\": \"./scripts/add_issue_number_into_commit.sh $HUSKY_GIT_PARAMS\"\n    }\n  }\n}\n</code></pre>\n<p>실제 동작하는 스크립트는 아래와 같이 작성되었다. (<a href=\"https://www.huskyhoochu.com/npm-husky-the-git-hook-manager/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">husky님의 블로그 글</a>을 대부분 참조했다.)</p>\n<pre><code class=\"language-sh\">#!/usr/bin/env bash\n\nCOMMIT_MSG_FILE=$1\n\nbranch_name=`git rev-parse --abbrev-ref HEAD`\ncut_number=`echo ${branch_name} | cut -d '-' -f1`\nfirst_line=`head -n1 ${COMMIT_MSG_FILE}`\n\n# if commit_msg_file's first line is empty,\n# add branch name in commit_msg\nif [ -z \"$first_line\" ]; then\n    sed -i \".bak\" \"1s/^/[#$cut_number] /\" $1\nfi\n</code></pre>\n<p>스크립트 실행 시 <code>HUSKY_GIT_PARAMS</code>로 git 파라미터를 bypass로 전달한다.</p>\n<table>\n<thead>\n<tr>\n<th>Index</th>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>$1</td>\n<td>COMMIT_MSG_FILE</td>\n<td>이 변수가 가리키는 <code>.git/COMMIT_EDITMSG</code> 파일은 커밋 시 출력되는 메시지를 담고 있다.</td>\n</tr>\n<tr>\n<td>$2</td>\n<td>COMMIT_SOURCE</td>\n<td>merge, message, template, commit 등 커밋의 종류를 나타낸다.</td>\n</tr>\n<tr>\n<td>$3</td>\n<td>SHA</td>\n<td>최근 커밋 수정(commit -amend)의 경우에는 커밋 hash 값을 추가로 받는다.</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"references\"><a href=\"#references\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>References</h1>\n<ul>\n<li><a href=\"https://www.huskyhoochu.com/npm-husky-the-git-hook-manager/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.huskyhoochu.com/npm-husky-the-git-hook-manager/</a></li>\n</ul>\n"}}]}}},"context":{}}