{"hash":"b8e6f4f7189fec8423846a399891bc56c792061d","data":{"post":{"title":"Husky v6에서 달라진 점","date":"23. May 2021","timeToRead":3,"content":"<h2 id=\"overview\"><a href=\"#overview\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Overview</h2>\n<p>lint-staged와 husky를 함께 사용할 때 가장 간단한 설정 방법은 <code>mrm</code> 이용이란 것은 이전 포스트에서 언급한 적이 있다.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">npx mrm lint-staged</code></pre>\n<p>최근에 gridsome starter를 만들며 동일하게 실행했는데 package.json에 husky 설정이 없어진 것을 보고 많은 혼란을 겪었던 일이 있었다. 구글링을 통해 확인해보니 husky v6이 되며 설정방법이 많이 바뀐 듯 하여 확인을 조금 해봤다.</p>\n<blockquote>\n<p><strong>Note:</strong> lint-staged를 설치하기 위해서는 linter가 설치되어 있어야 하고, husky는 git 저장소여야 설치된다.</p>\n</blockquote>\n<h2 id=\"husky-4-vs-6\"><a href=\"#husky-4-vs-6\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Husky 4 vs 6</h2>\n<p>v4에서는 <code>.husky.json</code>이나 <code>package.json</code>에 아래와 같이 설정하였다.</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">// .huskyrc.json (v4)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"hooks\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"pre-commit\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"npm test &amp;&amp; npm run foo\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>v6은 <code>.husky/</code> 디렉터리 하위에 스크립트를 생성한다. (경로는 변경 가능하다.)</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># .husky/pre-commit (v6)</span>\n<span class=\"token comment\"># ...</span>\n<span class=\"token function\">npm</span> <span class=\"token builtin class-name\">test</span>\n<span class=\"token function\">npm</span> run foo</code></pre>\n<h2 id=\"sharing-hooks\"><a href=\"#sharing-hooks\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sharing hooks</h2>\n<p><code>.husky/</code> 하위에 등록된 hook들은 git에 의해 저장소에 공유된다. 하지만 husky가 포함된 프로젝트를 clone하는 경우 husky 실행이 되지 않는 경우가 있다. 그 이유는 <code>.husky/.gitignore</code> 때문이다.</p>\n<pre class=\"language-text\"><code class=\"language-text\"># .husky/.gitignore\n_</code></pre>\n<p>자동 생성된 hook을 보면 초기화 스크립트인 <code>.husky/_/husky.sh</code>를 실행하도록 하는데 clone된 저장소에는 해당 디렉터리가 빠져있기 때문이다.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># pre-commit</span>\n<span class=\"token comment\">#!/bin/sh</span>\n<span class=\"token builtin class-name\">.</span> <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">dirname</span> <span class=\"token string\">\"<span class=\"token variable\">$0</span>\"</span><span class=\"token variable\">)</span></span>/_/husky.sh\"</span></code></pre>\n<p>그러므로 패키지 설치와 함께 <code>husky install</code>을 실행해줘야 한다.</p>\n<h2 id=\"husky-초기화-방법\"><a href=\"#husky-%EC%B4%88%EA%B8%B0%ED%99%94-%EB%B0%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Husky 초기화 방법</h2>\n<p>순서가 약간 뒤바뀐 듯 한데... husky를 초기 설정하는 가장 간단한 방법은 <code>npx mrm lint-staged</code>를 이용하는 것이고, husky를 따로 설정해야 하는 경우는 <del>나의 경험으로는</del> 저장소를 clone한 경우이다.</p>\n<h3 id=\"automatic-recommended\"><a href=\"#automatic-recommended\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Automatic (recommended)</h3>\n<p><a href=\"https://typicode.github.io/husky/#/?id=automatic-recommended\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">공식문서</a>에도 나와있지만 가장 간단한 방법은 <code>husky-init</code>을 이용하는 방법이다. yarn v1을 이용하는 필자 또한 이 방법이 가장 편하다.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">npx husky-init <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">npm</span> <span class=\"token function\">install</span>       <span class=\"token comment\"># npm</span>\nnpx husky-init <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">yarn</span>              <span class=\"token comment\"># Yarn 1</span></code></pre>\n<h3 id=\"manual\"><a href=\"#manual\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Manual</h3>\n<p><code>npm</code>을 이용하는 경우 <code>prepare</code> 스크립트를 이용해 더 편하게 사용할 수 있을 듯 하다. <code>prepare</code>는 lifecycle script 중 하나로 인자없이 <code>npm install</code> 할 때에도 실행되는 스크립트이다. 아래와 같이 실행하면,</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> set-script prepare <span class=\"token string\">\"husky install\"</span></code></pre>\n<p>package.json에 스크립트가 등록된다.</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">// package.json</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"prepare\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"husky install\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"references\"><a href=\"#references\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>References</h2>\n<ul>\n<li><a href=\"https://github.com/okonet/lint-staged#readme\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/okonet/lint-staged#readme</a></li>\n<li><a href=\"https://typicode.github.io/husky/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://typicode.github.io/husky/</a></li>\n</ul>\n","author":[{"id":"go2zo","title":"Go2zo"}],"excerpt":"프로젝트에서 lint-staged를 설치해보니 husky"}},"context":{}}