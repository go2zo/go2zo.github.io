{"hash":"d005b3b9f6e2f6c22ee735ab1695f032cbb6abe8","data":{"post":{"title":"Spring Cloud Config에서 github private repository 접근","date":"9. November 2021","timeToRead":4,"content":"<h2 id=\"spring-cloud-config\"><a href=\"#spring-cloud-config\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Spring Cloud Config</h2>\n<h3 id=\"github-not-authorized\"><a href=\"#github-not-authorized\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Github not authorized</h3>\n<p>Private repository 인 경우에는 접근을 위한 인증이 필요하다.</p>\n<p><code>http</code>와 <code>ssh</code> 방식이 있는데 이 구분은 <code>spring.cloud.config.server.git.uri</code>의 프로토콜로 구분한다.</p>\n<p><code>http</code>는 <code>username</code>, <code>passsword</code> 입력을 동반한다.</p>\n<p>그런데 이때 <code>password</code>에 GitHub 로그인 정보를 넣으면 <code>not authorized</code> 에러가 발생한다.</p>\n<p><code>Github > Settings > Developer settings > Personal access tokens</code>에서 발급받은 토큰을 입력해야 한다.</p>\n<p>해당 토큰은 발급시에만 확인 가능하니 발급 후 잘 기억해 둬야 한다.</p>\n<h3 id=\"auth-fail\"><a href=\"#auth-fail\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Auth fail</h3>\n<p>인증의 실패 이유는 보다 다양할 수 있지만 기본적인 가이드대로 진행했음에도 인증이 실패하는 경우는 대부분 아래의 원인에 있는 것으로 보인다.</p>\n<h4 id=\"case1-ed25519\"><a href=\"#case1-ed25519\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>CASE1: ED25519</h4>\n<p><a href=\"https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent#generating-a-new-ssh-key\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub 공식 문서</a>에는 ED25519 알고리즘 사용을 추천하지만 만약 SSH 키 생성 시 ED25519 알고리즘으로 생성하면 Spring Cloud Server 실행 시 이같은 에러를 볼 수 있다.</p>\n<p>이는 <a href=\"https://cloud.spring.io/spring-cloud-config/reference/html/#_authentication\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Spring Cloud Config 공식문서</a>에 나와있는 대로 <code>ssh-rsa</code>만 지원하기 때문이다.</p>\n<h4 id=\"case2-not-pem-format\"><a href=\"#case2-not-pem-format\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>CASE2: Not <code>PEM</code> format</h4>\n<p>또한 <code>-----BEGIN OPENSSH PRIVATE KEY-----</code>로 시작하는 개인키 또한 지원하지 않는다. </p>\n<p><code>-----BEGIN RSA PRIVATE KEY-----</code>로 시작하도록 해야하며 이는 ras 키를 <code>PEM</code> 포맷으로 생성해야 함을 의미한다.</p>\n<pre class=\"language-text\"><code class=\"language-text\">ssh-keygen -m PEM -t rsa -b 4096</code></pre>\n<h4 id=\"case3-not-id_rsa\"><a href=\"#case3-not-id_rsa\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>CASE3: Not <code>id_rsa</code></h4>\n<p>이 역시나 Spring Cloud Config Serve가 개인키를 서버에 명시하지 않았을 경우 찾는 파일이 <code>~/.ssh/id_rsa</code>이기 때문이다.</p>\n<p>기존에 키파일이 있고 새로운 키를 생성하기 위해 아래와 같이 파일명을 명시한 경우에는,</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">ssh-keygen -m PEM -t rsa -b <span class=\"token number\">4096</span> -f ~/.ssh/config_server_deploy_key.rsa</code></pre>\n<p>서버의 <code>application.yml</code>에 개인키를 명시해 줘야 한다.</p>\n<p>이 때, <code>ignore-local-ssh-settings</code>를 <code>true</code>로 함께 설정해줘야 한다. </p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">spring.cloud.config.server.git</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token key atrule\">ignore-local-ssh-settings</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n\t<span class=\"token key atrule\">private-key</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n\t  -----BEGIN RSA PRIVATE KEY-----\n\t  ...\n\t  -----END RSA PRIVATE KEY-----</span></code></pre>\n<h3 id=\"reject-hostkey-githubcom\"><a href=\"#reject-hostkey-githubcom\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Reject HostKey: github.com</h3>\n<p><code>~/.ssh/known_hosts</code>에 github.com이 등록되어 있어야 한다.</p>\n<p>아래와 같이 ssh 접속 테스트를 진행하여 github.com에 처음 접속하게 되면 </p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">ssh</span> -T git@github.com</code></pre>\n<h3 id=\"404-not-found\"><a href=\"#404-not-found\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>404 Not Found</h3>\n<p>웹 애플리케이션에서 해당 에러는 보통 경로가 잘못되었을 때 발생한다. 서버는 정상적으로 실행되었지만 경로가 잘못된 것을 의미한다.</p>\n<p>Config repository에 다음과 같이 설정파일을 생성했을 때 기본적으로 아래와 같이 값이 설정된다.</p>\n<ul>\n<li>{application}: payment</li>\n<li>{profile}: local, dev, prod</li>\n</ul>\n<p>![image-20211110102119237](/Users/go2zo/Library/Application Support/typora-user-images/image-20211110102119237.png)</p>\n<p>이 때 Config Server에서 지원하는 endpoint들은 아래와 같다.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">GET /<span class=\"token punctuation\">{</span>application<span class=\"token punctuation\">}</span>/<span class=\"token punctuation\">{</span>profile<span class=\"token punctuation\">}</span>\nGET /<span class=\"token punctuation\">{</span>application<span class=\"token punctuation\">}</span>/<span class=\"token punctuation\">{</span>profile<span class=\"token punctuation\">}</span>/<span class=\"token punctuation\">{</span>label<span class=\"token punctuation\">}</span>\nGET /<span class=\"token punctuation\">{</span>application<span class=\"token punctuation\">}</span>-<span class=\"token punctuation\">{</span>profile<span class=\"token punctuation\">}</span>.yml\nGET /<span class=\"token punctuation\">{</span>label<span class=\"token punctuation\">}</span>/<span class=\"token punctuation\">{</span>application<span class=\"token punctuation\">}</span>-<span class=\"token punctuation\">{</span>profile<span class=\"token punctuation\">}</span>.yml\nGET /<span class=\"token punctuation\">{</span>application<span class=\"token punctuation\">}</span>-<span class=\"token punctuation\">{</span>profile<span class=\"token punctuation\">}</span>.properties\nGET /<span class=\"token punctuation\">{</span>label<span class=\"token punctuation\">}</span>/<span class=\"token punctuation\">{</span>application<span class=\"token punctuation\">}</span>-<span class=\"token punctuation\">{</span>profile<span class=\"token punctuation\">}</span>.properties</code></pre>\n<p>여기서 {label}은 git의 branch명 혹은 commit값을 의미한다. {label}이 생략되면 어떻게 될까? 당연히 default값을 입력할테고 이는 당연히 상식선에서 default 브랜치를 의미할 것이다. config server는 git 저장소의 default 브랜치명을 <code>master</code>라 인지하고 있다.</p>\n<p>그런데 github는 <code>master</code> 대신 <code>main</code>을 사용한다. 따라서 {label}을 <code>main</code>으로 명시하지 않으면 404에러가 발생하게 된다. 이때는 config server에 아래와 같이 default label을 설정하면 된다.</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">spring.cloud.config.server.git.default-label</span><span class=\"token punctuation\">:</span> main</code></pre>\n<h3 id=\"conclusion\"><a href=\"#conclusion\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Conclusion</h3>\n<p>위의 내용을 토대로 정리를 하자면 다음과 같다.</p>\n<ol>\n<li>HTTP 방식은 github 계정과 함께 Personal Access Token으로 인증을 한다.</li>\n<li>\n<p>SSH 방식은 아래와 같이 진행하면 좋을 것 같다.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">ssh-keygen -m PEM -t rsa -b <span class=\"token number\">4096</span> -f ~/.ssh/config_server_deploy_key.rsa\n\nssh-add ~/.ssh/config_server_deploy_key.rsa\n\n<span class=\"token function\">ssh</span> -T git@github.com\n\ngh ssh-key <span class=\"token function\">add</span> ~/.ssh/config_server_deploy_key.rsa.pub</code></pre>\n</li>\n</ol>\n<p>하지만 이 방법도 개인키가 application.yml에 남게되면 저장소에 공유될 가능성이 있기 때문에 시스템 파라미터 등으로 처리하는 방식이 적절할 것 같다.</p>\n","author":[{"id":"go2zo","title":"Go2zo"}],"excerpt":"Spring Cloud Config 환경을 구성하며 겪은 몇가지 혼동되는 점을 정리한다."}},"context":{}}