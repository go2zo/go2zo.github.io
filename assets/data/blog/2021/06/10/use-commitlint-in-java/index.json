{"hash":"15137aaa7ba1de16c5baa0a6b693c01cae1ff0a4","data":{"post":{"title":"Java 프로젝트에서 commitlint 사용하기","date":"10. June 2021","timeToRead":3,"content":"<h2 id=\"gradle-git-hook\"><a href=\"#gradle-git-hook\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Gradle git hook</h2>\n<p>Gradle plugin을 <a href=\"https://plugins.gradle.org/search?term=githook\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">검색</a>해보면 3rd party 플러그인들이 몇개 나온다. 그나마 릴리즈가 좀 되었고 최신까지 관리가 된 <a href=\"https://github.com/STAR-ZERO/gradle-githook\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">com.star-zero.gradle.githook</a> 플러그인을 골라봤다. 사실 이 플러그인이 뒤에 설명할 <code>commitlint</code> 플러그인에서 함께 사용하고 있어서 고른 부분이 더 크다.</p>\n<h3 id=\"install\"><a href=\"#install\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Install</h3>\n<p>2021.06.10 기준 최신버전은 v1.2.1이다. (2020.08.29 이후로 업데이트가 없다.)</p>\n<pre class=\"language-groovy\"><code class=\"language-groovy\">plugins <span class=\"token punctuation\">{</span>\n  id <span class=\"token string gstring\">\"com.star-zero.gradle.githook\"</span> version <span class=\"token string gstring\">\"1.2.1\"</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Legacy에서는 아래와 같이 적용 가능하다.</p>\n<pre class=\"language-groovy\"><code class=\"language-groovy\">buildscript <span class=\"token punctuation\">{</span>\n  repositories <span class=\"token punctuation\">{</span>\n    maven <span class=\"token punctuation\">{</span>\n      url <span class=\"token string gstring\">\"https://plugins.gradle.org/m2/\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  dependencies <span class=\"token punctuation\">{</span>\n    classpath <span class=\"token string gstring\">\"com.star-zero.gradle:githook:1.2.1\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\napply plugin<span class=\"token punctuation\">:</span> <span class=\"token string gstring\">\"com.star-zero.gradle.githook\"</span></code></pre>\n<h3 id=\"configuration\"><a href=\"#configuration\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Configuration</h3>\n<p><code>build.gradle</code>에 아래와 같이 추가한다. 이후 gradle을 reload하면 <code>.git/hooks</code> 하위에 스크립트가 생성된다.</p>\n<pre class=\"language-groovy\"><code class=\"language-groovy\">githook <span class=\"token punctuation\">{</span>\n    gradleCommand <span class=\"token operator\">=</span> <span class=\"token function\">file</span><span class=\"token punctuation\">(</span><span class=\"token string gstring\">\"gradle_test\"</span><span class=\"token punctuation\">)</span>\n    hooksDir <span class=\"token operator\">=</span> <span class=\"token function\">file</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>rootDir<span class=\"token punctuation\">,</span> <span class=\"token string gstring\">\"githook_test/hooks\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    failOnMissingHooksDir <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n    createHooksDirIfNotExist <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n    hooks <span class=\"token punctuation\">{</span>\n        <span class=\"token string gstring\">\"pre-commit\"</span> <span class=\"token punctuation\">{</span>\n            task <span class=\"token operator\">=</span> <span class=\"token string gstring\">\"lint test\"</span>\n            shell <span class=\"token operator\">=</span> <span class=\"token string gstring\">\"echo 1\"</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token string gstring\">\"pre-push\"</span> <span class=\"token punctuation\">{</span>\n            task <span class=\"token operator\">=</span> <span class=\"token string gstring\">\"someTask\"</span>\n            shell <span class=\"token operator\">=</span> <span class=\"token string gstring\">\"someShell\"</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>\n<p>gradleCommand</p>\n<ul>\n<li>Gradle command file</li>\n<li>Default: <code>&#x3C;root_dir>/gradlew</code></li>\n</ul>\n</li>\n<li>\n<p>hooksDir</p>\n<ul>\n<li>Git hook directory. <code>git init</code>을 실행하면 기본값대로 생성된다.</li>\n<li>Default: <code>&#x3C;root_dir>/.git/hooks</code></li>\n</ul>\n</li>\n<li>\n<p>failOnMissingHooksDir</p>\n<ul>\n<li>hooksDir이 없으면 빌드가 실패해야 하는지 여부를 나타낸다.</li>\n<li>Default: <code>true</code></li>\n</ul>\n</li>\n<li>\n<p>createHooksDirIfNotExist</p>\n<ul>\n<li>hooksDir이 없으면 새로 생성한다. (<del>제곧내</del>)</li>\n<li>Default: <code>false</code></li>\n</ul>\n</li>\n<li>\n<p>hooks</p>\n<ul>\n<li>Git hook 스크립트 파일명이 온다. (e.g. commit-msg)</li>\n<li>내부에는 gradle task나 shell 명령어를 정의하고 이는 git hook 스크립트에 복사된다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"commitlint\"><a href=\"#commitlint\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Commitlint</h2>\n<p>역시나 gradle plugin 중 가장 최근까지 관리되고 있는 프로젝트로 골랐다. <a href=\"https://github.com/NetrisTV/gradle-commitlint-plugin\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">gradle-commitlint-plugin</a>은 <a href=\"https://www.conventionalcommits.org/ko/v1.0.0/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Conventional Commits</a> 룰에 대한 linting을 제공한다.</p>\n<h3 id=\"configuration-1\"><a href=\"#configuration-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Configuration</h3>\n<p><code>build.gradle</code></p>\n<pre class=\"language-groovy\"><code class=\"language-groovy\">plugins <span class=\"token punctuation\">{</span>\n  id <span class=\"token string gstring\">\"com.star-zero.gradle.githook\"</span> version <span class=\"token string gstring\">\"1.2.1\"</span>\n  id <span class=\"token string gstring\">\"ru.netris.commitlint\"</span> version <span class=\"token string gstring\">\"1.4.1\"</span>\n<span class=\"token punctuation\">}</span>\n\ngithook <span class=\"token punctuation\">{</span>\n  failOnMissingHooksDir <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n  createHooksDirIfNotExist <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n  hooks <span class=\"token punctuation\">{</span>\n    <span class=\"token string gstring\">\"commit-msg\"</span> <span class=\"token punctuation\">{</span>\n      task <span class=\"token operator\">=</span> <span class=\"token string gstring\">\"commitlint -Dmsgfile=\\$1\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><code>settings.gradle</code></p>\n<pre class=\"language-groovy\"><code class=\"language-groovy\">pluginManagement <span class=\"token punctuation\">{</span>\n  repositories <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">gradlePluginPortal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  resolutionStrategy <span class=\"token punctuation\">{</span>\n\teachPlugin <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>requested<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>id <span class=\"token operator\">==</span> <span class=\"token string gstring\">\"ru.netris.commitlint\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">useModule</span><span class=\"token punctuation\">(</span><span class=\"token string gstring\">\"ru.netris:commitlint-plugin:<span class=\"token expression\"><span class=\"token punctuation\">$</span><span class=\"token punctuation\">{</span>requested<span class=\"token punctuation\">.</span>version<span class=\"token punctuation\">}</span></span>\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nrootProject<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'***'</span></code></pre>\n<h2 id=\"test\"><a href=\"#test\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Test</h2>\n<p>커밋 컨벤션을 지키지 않으면 다음과 같은 에러 메시지를 볼 수 있다.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">></span> Task :commitlint FAILED\n\nFAILURE: Build failed with an exception.\n\n* What went wrong:\nExecution failed <span class=\"token keyword\">for</span> task <span class=\"token string\">':commitlint'</span><span class=\"token builtin class-name\">.</span>\n<span class=\"token operator\">></span> Invalid commit type. See https://www.conventionalcommits.org/en/v1.0.0/</code></pre>\n<p>컨벤션을 지켜 입력하여 커밋에 성공했다.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">></span> Task :commitlint\ncommitlint finished successfully\n\nBUILD SUCCESSFUL <span class=\"token keyword\">in</span> 1s\n<span class=\"token number\">1</span> actionable task: <span class=\"token number\">1</span> executed\n<span class=\"token punctuation\">[</span>feat-lint c319439<span class=\"token punctuation\">]</span> chore<span class=\"token punctuation\">(</span>core<span class=\"token punctuation\">)</span>: commitlint plugin 적용\n <span class=\"token number\">2</span> files changed, <span class=\"token number\">25</span> insertions<span class=\"token punctuation\">(</span>+<span class=\"token punctuation\">)</span>, <span class=\"token number\">1</span> deletion<span class=\"token punctuation\">(</span>-<span class=\"token punctuation\">)</span></code></pre>\n<h2 id=\"결론\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>결론</h2>\n<p>커밋 컨벤션은 <a href=\"https://www.conventionalcommits.org/ko/v1.0.0/#%EC%99%9C-conventional-commits%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%A0%EA%B9%8C%EC%9A%94\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">문서</a>에도 잘 설명되어 있지만 개발 이후 수반되는 빌드/배포 프로세스를 자동화 뿐만 아니라 해당 프로젝트를 보는 모든 사람들에게 변경된 사항을 제대로 알리기 위한 부분도 커 보인다. 팀 프로젝트를 많이 해왔지만 소규모 팀에서조차 이런 내용들이 제대로 전달되지 않아 배포시에 누락되거나 충돌 해결을 위해 대면하며 일일이 확인했던 기억들이 있다. 물론 초기 적용 시에 불편한 부분도 있을 이지만 잘 정착되도록 문화를 만들어가는 것은 중요한 부분 같다.</p>\n","author":[{"id":"go2zo","title":"Go2zo"}],"excerpt":"Nodejs 프로젝트에서는 husky를 이용해 git commit 시에 linter를 운용하는 것이 용이했다. Java 프로젝트에서는 어떤 방법들이 있을까? gradle git hook plugin을 이용해 commitlint를 적용하는 법을 알아보았다."}},"context":{}}