{"hash":"15137aaa7ba1de16c5baa0a6b693c01cae1ff0a4","data":{"posts":{"edges":[{"node":{"id":"e939ea44c2bc6ec4529ff0f2ec3477bb","title":"Java 프로젝트에서 commitlint 사용하기","path":"/blog/2021/06/10/use-commitlint-in-java/","date":"10. Jun 2021","timeToRead":3,"author":[{"id":"go2zo","title":"Go2zo","path":"/about"}],"tags":[{"id":"til","title":"til"},{"id":"commitlint'","title":"commitlint'"},{"id":"git hooks","title":"git hooks"},{"id":"java","title":"java"},{"id":"gradle","title":"gradle"}],"excerpt":"Nodejs 프로젝트에서는 husky를 이용해 git commit 시에 linter를 운용하는 것이 용이했다. Java 프로젝트에서는 어떤 방법들이 있을까? gradle git hook plugin을 이용해 commitlint를 적용하는 법을 알아보았다.","content":"<h2 id=\"gradle-git-hook\"><a href=\"#gradle-git-hook\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Gradle git hook</h2>\n<p>Gradle plugin을 <a href=\"https://plugins.gradle.org/search?term=githook\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">검색</a>해보면 3rd party 플러그인들이 몇개 나온다. 그나마 릴리즈가 좀 되었고 최신까지 관리가 된 <a href=\"https://github.com/STAR-ZERO/gradle-githook\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">com.star-zero.gradle.githook</a> 플러그인을 골라봤다. 사실 이 플러그인이 뒤에 설명할 <code>commitlint</code> 플러그인에서 함께 사용하고 있어서 고른 부분이 더 크다.</p>\n<h3 id=\"install\"><a href=\"#install\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Install</h3>\n<p>2021.06.10 기준 최신버전은 v1.2.1이다. (2020.08.29 이후로 업데이트가 없다.)</p>\n<pre class=\"language-groovy\"><code class=\"language-groovy\">plugins <span class=\"token punctuation\">{</span>\n  id <span class=\"token string gstring\">\"com.star-zero.gradle.githook\"</span> version <span class=\"token string gstring\">\"1.2.1\"</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Legacy에서는 아래와 같이 적용 가능하다.</p>\n<pre class=\"language-groovy\"><code class=\"language-groovy\">buildscript <span class=\"token punctuation\">{</span>\n  repositories <span class=\"token punctuation\">{</span>\n    maven <span class=\"token punctuation\">{</span>\n      url <span class=\"token string gstring\">\"https://plugins.gradle.org/m2/\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  dependencies <span class=\"token punctuation\">{</span>\n    classpath <span class=\"token string gstring\">\"com.star-zero.gradle:githook:1.2.1\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\napply plugin<span class=\"token punctuation\">:</span> <span class=\"token string gstring\">\"com.star-zero.gradle.githook\"</span></code></pre>\n<h3 id=\"configuration\"><a href=\"#configuration\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Configuration</h3>\n<p><code>build.gradle</code>에 아래와 같이 추가한다. 이후 gradle을 reload하면 <code>.git/hooks</code> 하위에 스크립트가 생성된다.</p>\n<pre class=\"language-groovy\"><code class=\"language-groovy\">githook <span class=\"token punctuation\">{</span>\n    gradleCommand <span class=\"token operator\">=</span> <span class=\"token function\">file</span><span class=\"token punctuation\">(</span><span class=\"token string gstring\">\"gradle_test\"</span><span class=\"token punctuation\">)</span>\n    hooksDir <span class=\"token operator\">=</span> <span class=\"token function\">file</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>rootDir<span class=\"token punctuation\">,</span> <span class=\"token string gstring\">\"githook_test/hooks\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    failOnMissingHooksDir <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n    createHooksDirIfNotExist <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n    hooks <span class=\"token punctuation\">{</span>\n        <span class=\"token string gstring\">\"pre-commit\"</span> <span class=\"token punctuation\">{</span>\n            task <span class=\"token operator\">=</span> <span class=\"token string gstring\">\"lint test\"</span>\n            shell <span class=\"token operator\">=</span> <span class=\"token string gstring\">\"echo 1\"</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token string gstring\">\"pre-push\"</span> <span class=\"token punctuation\">{</span>\n            task <span class=\"token operator\">=</span> <span class=\"token string gstring\">\"someTask\"</span>\n            shell <span class=\"token operator\">=</span> <span class=\"token string gstring\">\"someShell\"</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>\n<p>gradleCommand</p>\n<ul>\n<li>Gradle command file</li>\n<li>Default: <code>&#x3C;root_dir>/gradlew</code></li>\n</ul>\n</li>\n<li>\n<p>hooksDir</p>\n<ul>\n<li>Git hook directory. <code>git init</code>을 실행하면 기본값대로 생성된다.</li>\n<li>Default: <code>&#x3C;root_dir>/.git/hooks</code></li>\n</ul>\n</li>\n<li>\n<p>failOnMissingHooksDir</p>\n<ul>\n<li>hooksDir이 없으면 빌드가 실패해야 하는지 여부를 나타낸다.</li>\n<li>Default: <code>true</code></li>\n</ul>\n</li>\n<li>\n<p>createHooksDirIfNotExist</p>\n<ul>\n<li>hooksDir이 없으면 새로 생성한다. (<del>제곧내</del>)</li>\n<li>Default: <code>false</code></li>\n</ul>\n</li>\n<li>\n<p>hooks</p>\n<ul>\n<li>Git hook 스크립트 파일명이 온다. (e.g. commit-msg)</li>\n<li>내부에는 gradle task나 shell 명령어를 정의하고 이는 git hook 스크립트에 복사된다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"commitlint\"><a href=\"#commitlint\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Commitlint</h2>\n<p>역시나 gradle plugin 중 가장 최근까지 관리되고 있는 프로젝트로 골랐다. <a href=\"https://github.com/NetrisTV/gradle-commitlint-plugin\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">gradle-commitlint-plugin</a>은 <a href=\"https://www.conventionalcommits.org/ko/v1.0.0/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Conventional Commits</a> 룰에 대한 linting을 제공한다.</p>\n<h3 id=\"configuration-1\"><a href=\"#configuration-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Configuration</h3>\n<p><code>build.gradle</code></p>\n<pre class=\"language-groovy\"><code class=\"language-groovy\">plugins <span class=\"token punctuation\">{</span>\n  id <span class=\"token string gstring\">\"com.star-zero.gradle.githook\"</span> version <span class=\"token string gstring\">\"1.2.1\"</span>\n  id <span class=\"token string gstring\">\"ru.netris.commitlint\"</span> version <span class=\"token string gstring\">\"1.4.1\"</span>\n<span class=\"token punctuation\">}</span>\n\ngithook <span class=\"token punctuation\">{</span>\n  failOnMissingHooksDir <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n  createHooksDirIfNotExist <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n  hooks <span class=\"token punctuation\">{</span>\n    <span class=\"token string gstring\">\"commit-msg\"</span> <span class=\"token punctuation\">{</span>\n      task <span class=\"token operator\">=</span> <span class=\"token string gstring\">\"commitlint -Dmsgfile=\\$1\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><code>settings.gradle</code></p>\n<pre class=\"language-groovy\"><code class=\"language-groovy\">pluginManagement <span class=\"token punctuation\">{</span>\n  repositories <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">gradlePluginPortal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  resolutionStrategy <span class=\"token punctuation\">{</span>\n\teachPlugin <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>requested<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>id <span class=\"token operator\">==</span> <span class=\"token string gstring\">\"ru.netris.commitlint\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">useModule</span><span class=\"token punctuation\">(</span><span class=\"token string gstring\">\"ru.netris:commitlint-plugin:<span class=\"token expression\"><span class=\"token punctuation\">$</span><span class=\"token punctuation\">{</span>requested<span class=\"token punctuation\">.</span>version<span class=\"token punctuation\">}</span></span>\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nrootProject<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'***'</span></code></pre>\n<h2 id=\"test\"><a href=\"#test\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Test</h2>\n<p>커밋 컨벤션을 지키지 않으면 다음과 같은 에러 메시지를 볼 수 있다.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">></span> Task :commitlint FAILED\n\nFAILURE: Build failed with an exception.\n\n* What went wrong:\nExecution failed <span class=\"token keyword\">for</span> task <span class=\"token string\">':commitlint'</span><span class=\"token builtin class-name\">.</span>\n<span class=\"token operator\">></span> Invalid commit type. See https://www.conventionalcommits.org/en/v1.0.0/</code></pre>\n<p>컨벤션을 지켜 입력하여 커밋에 성공했다.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">></span> Task :commitlint\ncommitlint finished successfully\n\nBUILD SUCCESSFUL <span class=\"token keyword\">in</span> 1s\n<span class=\"token number\">1</span> actionable task: <span class=\"token number\">1</span> executed\n<span class=\"token punctuation\">[</span>feat-lint c319439<span class=\"token punctuation\">]</span> chore<span class=\"token punctuation\">(</span>core<span class=\"token punctuation\">)</span>: commitlint plugin 적용\n <span class=\"token number\">2</span> files changed, <span class=\"token number\">25</span> insertions<span class=\"token punctuation\">(</span>+<span class=\"token punctuation\">)</span>, <span class=\"token number\">1</span> deletion<span class=\"token punctuation\">(</span>-<span class=\"token punctuation\">)</span></code></pre>\n<h2 id=\"결론\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>결론</h2>\n<p>커밋 컨벤션은 <a href=\"https://www.conventionalcommits.org/ko/v1.0.0/#%EC%99%9C-conventional-commits%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%A0%EA%B9%8C%EC%9A%94\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">문서</a>에도 잘 설명되어 있지만 개발 이후 수반되는 빌드/배포 프로세스를 자동화 뿐만 아니라 해당 프로젝트를 보는 모든 사람들에게 변경된 사항을 제대로 알리기 위한 부분도 커 보인다. 팀 프로젝트를 많이 해왔지만 소규모 팀에서조차 이런 내용들이 제대로 전달되지 않아 배포시에 누락되거나 충돌 해결을 위해 대면하며 일일이 확인했던 기억들이 있다. 물론 초기 적용 시에 불편한 부분도 있을 이지만 잘 정착되도록 문화를 만들어가는 것은 중요한 부분 같다.</p>\n"}},{"node":{"id":"cf4b3c457c1db4b8657ad7a424a95162","title":"[Resolved] Could not target platform: 'Java SE 11' using tool chain: 'JDK 8 (1.8)'","path":"/blog/2021/06/09/could-not-target-platform-java-se-11-using-tool-chain-jdk-1-1-8/","date":"9. Jun 2021","timeToRead":2,"author":[{"id":"go2zo","title":"Go2zo","path":"/about"}],"tags":[{"id":"gradle","title":"gradle"},{"id":"jdk","title":"jdk"},{"id":"resolved","title":"resolved"}],"excerpt":"JDK 11로 버전업을 한 이후 IntelliJ에서 Gradle Task를 실행하는 것은 잘 되었지만 터미널에서 ./gradlew build 명령을 실행하면 여전히 에러가 발생하였다.","content":"<h2 id=\"java-se-11-using-tool-chain-jdk-8-18\"><a href=\"#java-se-11-using-tool-chain-jdk-8-18\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>'Java SE 11' using tool chain: 'JDK 8 (1.8)'</h2>\n<p>IntelliJ에서 gradle task를 실행할 때 보통 tool windows의 <code>Execute gradle task</code> 버튼(코끼리모양)을 이용하곤 한다.</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 660 102' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-76ebbccff6bd6140fb962ba05327bcb1'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-76ebbccff6bd6140fb962ba05327bcb1)' width='660' height='102' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAKCAYAAAAEqljUAAAACXBIWXMAABYlAAAWJQFJUiTwAAAD3UlEQVRIx9VUS3PTVhT2n2CmZdOZ0umCRekUZjKFZtPBjixZsiVLli3i2JZsy3EcnBeQOHZIcAJ54TRAX2npg4FJQ6cs2h/Qme676C/6OOfaUuOQRZaw%2bObce8%2b5R9/5zj2KSHYVMctD3K4IyNkqpEwZY4Rgr%2bT80L7NYI4BzzGqiddsAz/XI4V1ETQdEcdfwOR8B0ahAX1iCgnHh1Odgz/XRnK8TvvaO1H8cXDzJhdWsP/dT6jOtqnofiNT%2bSlYblPUKkTQDESaS12013ex3N3F1t432Nh9jHvb%2b3jQ%2bxq9JwcoNRYRM70hhd9WKARuYDTtCv5Pnx1SPU8QNV1RsDu9hNurm6hRw/klCAEsb4YOVpAhywFeswX35hLGJ2%2bhQuqZpSZd5hdQe0deQE3wdarz6NzvwS7PIp7t82cr8agHorEAEs1I1ChAslzE0kWxZhusJasE2aZ5ypyOOEGyyyHihON%2bhfZKtjycw%2b6fn4wTMad965T4N%2b6diB8zS7iuF4QN/fb/iFO9skr/AEVLQpITGCPwOqGlBHitqARay%2bpgfRIcq2pIJxJIKwpBRoqsuDu4z7ljcQXxhBre43zB98I9xUhKguK0Qe6%2bj7nIdMY%2bwWvgkweW84d3hrglh%2bs4Ac4pE6eIpqfhVWuo%2bJNQU4ZAgpE0wD4uMjxP6gOQj88sGy%2buXsRfVz7A0chH%2bOOLi/jn8wu4Gx2FZNpIUszs/C10VtdQ9CqCNN/XzQz8eiPMx98p%2bXXkxgsw0pb4Vops0jCFeLYzDrfiC9E4Vjf7MZzPq/p0b0LkCXieBRzPIkSyN/LY2NxGc24BHn2E1WQ0Z%2bex/bAnyIpO0wXDysDOOYIY71O0f3n5Q9zxSnh%2beIT9n5/hQI/hq9HPEM04UBQV%2baKLpXYnJMi2RsWvdTcwUfJEEUkq9tGPv%2bLxL4e43d2CykXSGftqU9PYebiHbw9%2bIBGq4swgTmyZ24vD39DqrIj9m406HUMCcJLpmTmsEqF64yY9NVUUXKZXsdhqC8WDi6m0KUTgM3UgwNGVC/h%2beRF//v6ShNzC1rVP8ejLEUStHI1Hv4C19fuwso7IyyiVK7i71hWd5b1mWFjf3MX0/lPE955DdQrQdYN8OonkYqe3hzutZep0XjxrFoCb9GB7Byur91B0yyHPs3R%2bSAAmkM5kBZnjCVhR/sjxM14Hr0FLkSg0Aq9GPsa/l97D35feJ5zHf5%2bcQ/f6KP18eAR0VGp1NJozuJEvhCPAZPnZBrl45BSZ/h1FH4nWJuXNIUUCaPTSuCH8SjlOUrT%2bCAzGhDmzn8fMtHND43pWAV4Dmb0bhl4VLzgAAAAASUVORK5CYII=' /%3e%3c/svg%3e\" width=\"660\" alt=\"Execute grald task\" data-srcset=\"/assets/static/image-20210609235941622.73cee3e.e0d918dd48f3b8d1f9af3174d3d58c91.png 660w\" data-sizes=\"(max-width: 660px) 100vw, 660px\" data-src=\"/assets/static/image-20210609235941622.73cee3e.e0d918dd48f3b8d1f9af3174d3d58c91.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/image-20210609235941622.73cee3e.e0d918dd48f3b8d1f9af3174d3d58c91.png\" width=\"660\" alt=\"Execute grald task\"></noscript></p>\n<p>그런데 터미널에서 <code>./gradlew build</code> 명령어로 실행하려 하니 아래와 같이 에러가 발생한다.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">Task :compileJava FAILED\n\nFAILURE: Build failed with an exception.\n\n* What went wrong:\nExecution failed <span class=\"token keyword\">for</span> task <span class=\"token string\">':compileJava'</span><span class=\"token builtin class-name\">.</span>\n<span class=\"token operator\">></span> Could not target platform: <span class=\"token string\">'Java SE 11'</span> using tool chain: <span class=\"token string\">'JDK 8 (1.8)'</span><span class=\"token builtin class-name\">.</span>\n\n* Try:\nRun with --stacktrace option to get the stack trace. Run with --info or --debug option to get <span class=\"token function\">more</span> log output. Run with --scan to get full insights.\n\n* Get <span class=\"token function\">more</span> <span class=\"token builtin class-name\">help</span> at https://help.gradle.org\n\nBUILD FAILED <span class=\"token keyword\">in</span> 3s\n<span class=\"token number\">1</span> actionable task: <span class=\"token number\">1</span> executed</code></pre>\n<h2 id=\"보편적인-확인-사항\"><a href=\"#%EB%B3%B4%ED%8E%B8%EC%A0%81%EC%9D%B8-%ED%99%95%EC%9D%B8-%EC%82%AC%ED%95%AD\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>보편적인 확인 사항</h2>\n<ol>\n<li>\n<p>File > Project Structure... > Project</p>\n<p>: Project SDK에 Java 11인지 확인한다.</p>\n</li>\n<li>\n<p>File > Project Structure... > Modules</p>\n<p>: Language level에 Java 11인지 확인한다. 보통 프로젝트를 따르도록(<code>Project default</code>) 설정한다.</p>\n</li>\n<li>\n<p>Preferences > Build, Execution, Deployment > Build Tools > Gradle</p>\n<p>: Gradle JVM에 Java 11인지 확인한다. 프로젝트를 따르도록(Project SDK) 설정한다.</p>\n</li>\n<li>build.gradle 파일의 <code>targetCompatibility = '11'</code> 인지 확인한다.</li>\n</ol>\n<h2 id=\"나의-경우\"><a href=\"#%EB%82%98%EC%9D%98-%EA%B2%BD%EC%9A%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>나의 경우</h2>\n<p>하지만 여전히 동일한 에러를 발생하고 있었고 아차싶어 <code>gradlew</code> 파일을 열어보니 당연하게도 스크립트는 IntelliJ 설정과 무관하게 <code>JAVA_HOME</code>을 참조하고 있었다.</p>\n<p>Java 버전 관리는 <a href=\"https://sdkman.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">sdkman</a>을 이용하고 있고 멀티 버전이 설치되어 있는 와중에 기본설정이 8로 되어 있었다.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">sdk current java\n\nUsing java version <span class=\"token number\">8.0</span>.265.hs-adpt</code></pre>\n<p>Global 설정을 java 11로 변경하고 에러가 해결 되었다.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">sdk use java <span class=\"token number\">11.0</span>.11.hs-adpt\n\nUsing java version <span class=\"token number\">11.0</span>.11.hs-adpt <span class=\"token keyword\">in</span> this shell.</code></pre>\n"}},{"node":{"id":"a6045a97766e1083781dd2d75f52a005","title":"Husky v6에서 달라진 점","path":"/blog/2021/05/23/husky-v6/","date":"23. May 2021","timeToRead":3,"author":[{"id":"go2zo","title":"Go2zo","path":"/about"}],"tags":[{"id":"husky","title":"husky"},{"id":"til","title":"til"}],"excerpt":"husky v6으로 버전업 되며 바뀐점을 간략히 체크해봤다.","content":"<h2 id=\"overview\"><a href=\"#overview\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Overview</h2>\n<p>lint-staged와 husky를 함께 사용할 때 가장 간단한 설정 방법은 <code>mrm</code> 이용이란 것은 이전 포스트에서 언급한 적이 있다.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">npx mrm lint-staged</code></pre>\n<p>최근에 gridsome starter를 만들며 동일하게 실행했는데 package.json에 husky 설정이 없어진 것을 보고 많은 혼란을 겪었던 일이 있었다. 구글링을 통해 확인해보니 husky v6이 되며 설정방법이 많이 바뀐 듯 하여 확인을 조금 해봤다.</p>\n<blockquote>\n<p><strong>Note:</strong> lint-staged를 설치하기 위해서는 linter가 설치되어 있어야 하고, husky는 git 저장소여야 설치된다.</p>\n</blockquote>\n<h2 id=\"husky-4-vs-6\"><a href=\"#husky-4-vs-6\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Husky 4 vs 6</h2>\n<p>v4에서는 <code>.husky.json</code>이나 <code>package.json</code>에 아래와 같이 설정하였다.</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">// .huskyrc.json (v4)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"hooks\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"pre-commit\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"npm test &amp;&amp; npm run foo\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>v6은 <code>.husky/</code> 디렉터리 하위에 스크립트를 생성한다. (경로는 변경 가능하다.)</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># .husky/pre-commit (v6)</span>\n<span class=\"token comment\"># ...</span>\n<span class=\"token function\">npm</span> <span class=\"token builtin class-name\">test</span>\n<span class=\"token function\">npm</span> run foo</code></pre>\n<h2 id=\"sharing-hooks\"><a href=\"#sharing-hooks\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sharing hooks</h2>\n<p><code>.husky/</code> 하위에 등록된 hook들은 git에 의해 저장소에 공유된다. 하지만 husky가 포함된 프로젝트를 clone하는 경우 husky 실행이 되지 않는 경우가 있다. 그 이유는 <code>.husky/.gitignore</code> 때문이다.</p>\n<pre class=\"language-text\"><code class=\"language-text\"># .husky/.gitignore\n_</code></pre>\n<p>자동 생성된 hook을 보면 초기화 스크립트인 <code>.husky/_/husky.sh</code>를 실행하도록 하는데 clone된 저장소에는 해당 디렉터리가 빠져있기 때문이다.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># pre-commit</span>\n<span class=\"token comment\">#!/bin/sh</span>\n<span class=\"token builtin class-name\">.</span> <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">dirname</span> <span class=\"token string\">\"<span class=\"token variable\">$0</span>\"</span><span class=\"token variable\">)</span></span>/_/husky.sh\"</span></code></pre>\n<p>그러므로 패키지 설치와 함께 <code>husky install</code>을 실행해줘야 한다.</p>\n<h2 id=\"husky-초기화-방법\"><a href=\"#husky-%EC%B4%88%EA%B8%B0%ED%99%94-%EB%B0%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Husky 초기화 방법</h2>\n<p>순서가 약간 뒤바뀐 듯 한데... husky를 초기 설정하는 가장 간단한 방법은 <code>npx mrm lint-staged</code>를 이용하는 것이고, husky를 따로 설정해야 하는 경우는 <del>나의 경험으로는</del> 저장소를 clone한 경우이다.</p>\n<h3 id=\"automatic-recommended\"><a href=\"#automatic-recommended\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Automatic (recommended)</h3>\n<p><a href=\"https://typicode.github.io/husky/#/?id=automatic-recommended\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">공식문서</a>에도 나와있지만 가장 간단한 방법은 <code>husky-init</code>을 이용하는 방법이다. yarn v1을 이용하는 필자 또한 이 방법이 가장 편하다.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">npx husky-init <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">npm</span> <span class=\"token function\">install</span>       <span class=\"token comment\"># npm</span>\nnpx husky-init <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">yarn</span>              <span class=\"token comment\"># Yarn 1</span></code></pre>\n<h3 id=\"manual\"><a href=\"#manual\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Manual</h3>\n<p><code>npm</code>을 이용하는 경우 <code>prepare</code> 스크립트를 이용해 더 편하게 사용할 수 있을 듯 하다. <code>prepare</code>는 lifecycle script 중 하나로 인자없이 <code>npm install</code> 할 때에도 실행되는 스크립트이다. 아래와 같이 실행하면,</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> set-script prepare <span class=\"token string\">\"husky install\"</span></code></pre>\n<p>package.json에 스크립트가 등록된다.</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">// package.json</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"prepare\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"husky install\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"references\"><a href=\"#references\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>References</h2>\n<ul>\n<li><a href=\"https://github.com/okonet/lint-staged#readme\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/okonet/lint-staged#readme</a></li>\n<li><a href=\"https://typicode.github.io/husky/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://typicode.github.io/husky/</a></li>\n</ul>\n"}},{"node":{"id":"ce7439a41405a1423068b8a3fe19ff8f","title":"Post에서 이미지 상대경로","path":"/blog/2021/05/22/images-in-posts/","date":"22. May 2021","timeToRead":2,"author":[{"id":"go2zo","title":"Go2zo","path":"/about"}],"tags":[{"id":"gridsome","title":"gridsome"},{"id":"post","title":"post"},{"id":"transform","title":"transform"}],"excerpt":"Blog post의 이미지가 로딩되지 않는 문제가 있었는데 아주 간단하고 사소한 문제였다.","content":"<h2 id=\"마크다운과-이미지-삽입\"><a href=\"#%EB%A7%88%ED%81%AC%EB%8B%A4%EC%9A%B4%EA%B3%BC-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%82%BD%EC%9E%85\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>마크다운과 이미지 삽입</h2>\n<p>나는 typora와 lightshot을 이용해 마크다운 내 캡쳐 이미지 삽입의 편리성을 도모한다. typora 설정으로 ./images/` 디렉터리에 자동 저장하게 했으며 이는 그렇게 편할 수가 없다.</p>\n<p>붙여넣기 하는 순간 파일은 저장되고 본문에는 아래와 같이 삽입된다.</p>\n<pre class=\"language-markdown\"><code class=\"language-markdown\"><span class=\"token url\"><span class=\"token operator\">!</span>[<span class=\"token content\">image-20210523035823638</span>](<span class=\"token url\">./images/image-20210523035823638.png</span>)</span></code></pre>\n<h2 id=\"404-에러\"><a href=\"#404-%EC%97%90%EB%9F%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>404 에러</h2>\n<p>그런데 <code>gridsome develop</code>으로 실제 배포를 해보면 이미지가 로드되지 않는 문제가 있었다.</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1088 104' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-bd66d1d8975d9228c3cd2e15a548addf'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-bd66d1d8975d9228c3cd2e15a548addf)' width='1088' height='104' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAGCAYAAABzaJivAAAACXBIWXMAABYlAAAWJQFJUiTwAAAB9ElEQVQ4y%2bVRyW4TQRQcQCKr43Vsz9ozjmMfHBIMMRizJ0yw4ziQKCEhIBZxQ9w4c%2bLMNxf1nmckgxAKHOFQet3V71VVd1vf1jfwpdlCUirgjQlx7NRx6rl4H0foz8/hdRhoHZWKeOl7%2bNRuY7Awj3GlrPsXrqM1KeTxKvC1di5ZqvWhEePW3FWcOA77XEzsylSX84PFBe2RmXPijJ4fWy31G5VLOLBtHNaqeBcZPFhewpD%2bdzh3Qr9z3%2bdcgKN6TbMJJ%2bfi/bXXU13p/dzpaIbtlRyeFot4S62zNLOsN69chnVUr2NStXGdJns82GbIhMb7nofu0iKGfJDb%2bRX0KS7cMQe3csu4z5BDXkxmJgx0lwZjXuJRpYJrNH9MHdn3xJweuwz7sFxWjRv02srlVPswDPGcl96t1fCMDyEzorXDTJJDaj%2bfZy5bczypVjGip2iKt3AJZyWTYMyHvsfHuEkP6RG9QaGgnknqIfwOdTb4CZa31oXf3IQxMbwwRmAa8FndIEIUN5ULo1WFcE5gYLiWPjnz0l7ZZ1Xm/HQvvVlfMMNlvOwFs%2bswzaAwU3/R05pqZci4TNMNpxlm9cPox72X6kpOq9HuQmAiIdaUzGBm1hniX3A/Q8x%2be34Bjb/Bn%2bpKTkt%2b3qSvEUnw/wzWRX/tX8V31WYchohmKZgAAAAASUVORK5CYII=' /%3e%3c/svg%3e\" width=\"1088\" alt=\"404 error\" data-srcset=\"/assets/static/image-20210523035823638.82a2fbd.9f31af8fd0c0e5279c3671c7a001cf91.png 480w, /assets/static/image-20210523035823638.b474ba6.9f31af8fd0c0e5279c3671c7a001cf91.png 1088w\" data-sizes=\"(max-width: 1088px) 100vw, 1088px\" data-src=\"/assets/static/image-20210523035823638.b474ba6.9f31af8fd0c0e5279c3671c7a001cf91.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/image-20210523035823638.b474ba6.9f31af8fd0c0e5279c3671c7a001cf91.png\" width=\"1088\" alt=\"404 error\"></noscript></p>\n<blockquote>\n<p>\"이미지 위치가 잘못되었나? 이미지 배포와 관련한 플러그인이 따로 있나?\"</p>\n</blockquote>\n<p>이런저런 고민이 들었지만 gridsome.org 저장소의 블로그에는 이미지가 post별로 저장되어 있었기 때문에 전자는 아닐거라 생각했다. 그래서 따로 플러그인이 있는지 <a href=\"https://gridsome.org/plugins/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">gridsome 플러그인</a>과 <a href=\"https://github.com/remarkjs/remark/blob/main/doc/plugins.md#list-of-plugins\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">remark 플러그인</a>을 뒤져봤지만 별다른 성과는 없었다.</p>\n<h2 id=\"허무한-결론\"><a href=\"#%ED%97%88%EB%AC%B4%ED%95%9C-%EA%B2%B0%EB%A1%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>허무한 결론</h2>\n<p>그러다 문득 <code>./</code> 혹은 <code>../</code> 없이 상대경로를 표시할 때 프로젝트 root에서 찾는 경우가 생각나 이미지 경로에 적용하니 이미지가 정상적으로 로드되었다.</p>\n<p>다시 한번 보면, 아래와 같이 작성하면 이미지가 제대로 로드된다.</p>\n<pre class=\"language-markdown\"><code class=\"language-markdown\"><span class=\"token url\"><span class=\"token operator\">!</span>[<span class=\"token content\">good</span>](<span class=\"token url\">./images/good.jpg</span>)</span></code></pre>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 500 500' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-e62fbda18cf7c63f3d2f1551ba5a8630'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-e62fbda18cf7c63f3d2f1551ba5a8630)' width='500' height='500' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCABAAEADASIAAhEBAxEB/8QAGQABAQEBAQEAAAAAAAAAAAAAAAcIBQEG/8QAKhAAAAYCAgEDBAIDAAAAAAAAAAECAwQFBhEHIRITMUEUFVGBYXEIFiL/xAAUAQEAAAAAAAAAAAAAAAAAAAAA/8QAFBEBAAAAAAAAAAAAAAAAAAAAAP/aAAwDAQACEQMRAD8AyoAAAAAAAAAAAAAAPRoaqlx%2bJ%2bFscv6irgTMpyR5ZlMlsk79O0kz0lBH7deP7M970QDPADSnIOH5Jn0LGUWmDfYsrfmFEkWbfpIivoUSlEa0pUavIiTvej9lF8kQ%2bQncQ086Hfs4Zlv3q7om1OzISoKmScSk9LNpez8tGRl/P57IBGgFwa4Up2LWBjNvmbUPNJzCXW4BQlrYbUpO0trdI%2blGRH8fo%2bt88%2bIYFDjUew5ByZOPy50h2NCjJiKkbNtRpUtZpPpG9dkR9GR/OgEfAWb/ACthR4HJEJmK0w2gqmNv0EklKj2vstfnXuIyACx4hn2L2vHkbCuSItj9HAeN6usa7xN1nezNKiV8dn%2bejLotEYjgANJR%2bbcVxekq6zEYVzIRWWjcv1rFaVLmNmhaXTUe/wDg9K0kta6I%2bhxWOQsHw/8A2i4wdN5Ivr1lxltuc02hqElxXkrsjM1mR%2b39F/Yg4ANCu8l8f2uZVmf3Ee%2bbyWG02blcwhs47z7afFKicM9kn2%2bPgv3z73krEuRsagNchNW8S2q5L7rKqxCFofacV5emfkZeJlpKd/xv50IUAC38pZxx/mz1vYqg3CLNNdGi1WyJKGlo8/Ml6V2XZaPR%2b3wIiPAAAAAAAAAAAAAAAH//2Q==' /%3e%3c/svg%3e\" width=\"500\" alt=\"good\" data-srcset=\"/assets/static/good.b269a45.08454fbf5eeed922c841a66439af9d09.jpg 500w\" data-sizes=\"(max-width: 500px) 100vw, 500px\" data-src=\"/assets/static/good.b269a45.08454fbf5eeed922c841a66439af9d09.jpg\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/good.b269a45.08454fbf5eeed922c841a66439af9d09.jpg\" width=\"500\" alt=\"good\"></noscript></p>\n<p>그리고 이렇게 작성하면 대체 텍스트가 표시 될 것이다.</p>\n<pre class=\"language-markdown\"><code class=\"language-markdown\"><span class=\"token url\"><span class=\"token operator\">!</span>[<span class=\"token content\">404 error</span>](<span class=\"token url\">images/good.jpg</span>)</span></code></pre>\n<p><img src=\"images/good.jpg\" alt=\"404 error\"></p>\n"}},{"node":{"id":"704e574bc78719776bc4b630d395c640","title":"Gridsome에 Eslint와 Prettier 적용기","path":"/blog/2020/12/30/gridsome-with-eslint-and-prettier/","date":"30. Dec 2020","timeToRead":2,"author":[{"id":"go2zo","title":"Go2zo","path":"/about"}],"tags":[{"id":"gridsome","title":"gridsome"},{"id":"eslint","title":"eslint"},{"id":"prettier","title":"prettier"}],"excerpt":"lint-staged와 husky를 이용해 eslint와 커밋 메시지에 issue 번호 지정을 자동화 한다.","content":"<h2 id=\"eslint-vs-prettier\"><a href=\"#eslint-vs-prettier\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Eslint vs. Prettier</h2>\n<p>두 도구는 사실 결이 다르다. Eslint는 자바스크립트 <strong>문법검사 도구</strong>이고 Prettier는 <strong>코드 포매팅</strong>을 위한 도구이다. Eslint는 정적분석을 통해 에러유발 코드등을 찾기 때문에 코딩 컨벤션을 검사하는 기능도 갖추고 있긴 하나 코드 포매팅에 특화된 Prettier에 비해 약한편이라고 볼 수 있다. 따라서 보통 eslint와 prettier를 함께 사용한다.</p>\n<h2 id=\"eslint--prettier\"><a href=\"#eslint--prettier\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Eslint + Prettier</h2>\n<p>eslint에 prettier를 함께 적용하기 위해 <code>eslint-plugin-prettier</code> 플러그인을 추가한다.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> -D eslint-plugin-prettier</code></pre>\n<p><code>.eslintrc.js</code>에 다음과 같이 추가한다.</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// .eslintrc.js</span>\nmodule<span class=\"token punctuation\">.</span><span class=\"token property-access\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"prettier\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"rules\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"prettier/prettier\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"error\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>보다 권장되는 설정은 <code>eslint-config-prettier</code>를 이용하는 것이다.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> -D eslint-config-prettier</code></pre>\n<p><code>eslint-config-prettier</code>는 prettier 룰과 충돌하는 eslint룰을 off해주고 <code>extends</code> 설정을 지원한다.</p>\n<pre class=\"language-diff\"><code class=\"language-diff\">// .eslintjs.js\nmodule.exports = {\n<span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\"> \"extends\": [\"plugin:prettier/recommended\"]\n</span></span><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span><span class=\"token line\"> \"plugins\": [\"prettier\"],\n</span><span class=\"token prefix deleted\">-</span><span class=\"token line\"> \"rules\": {\n</span><span class=\"token prefix deleted\">-</span><span class=\"token line\">   \"prettier/prettier\": \"error\"\n</span><span class=\"token prefix deleted\">-</span><span class=\"token line\"> }\n</span></span>}</code></pre>\n<p>prettier 설정은 <code>.prettierrc</code> 파일에 작성한다.</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">// .prettierrc</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"singleQuote\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"semi\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"gridsome에-적용하기\"><a href=\"#gridsome%EC%97%90-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Gridsome에 적용하기</h2>\n<p>Gridsome을 위한 eslint의 공식 플러그인(<code>eslint-plugin-gridsome</code>)을 이용한다.</p>\n<p><code>eslint-plugin-gridsome</code>이 <code>vue-eslint-parser</code> ^6.0.4 버전 이상을 사용하므로 함께 설치한다.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> -D eslint-plugin-gridsome vue-eslint-parser</code></pre>\n<p><code>.eslintrc.js</code> 파일에 직접 플러그인을 설정해도 되지만 아래와 같이 extends로 간편하게 설정할 수 있다.</p>\n<pre class=\"language-diff\"><code class=\"language-diff\">// .eslintrc.js\nmodule.exports = {\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> parser: \"vue-eslint-parser\",\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\"> extends: [\"plugin:gridsome/recommended\"],\n</span></span><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span><span class=\"token line\"> plugins: [\"gridsome\"],\n</span><span class=\"token prefix deleted\">-</span><span class=\"token line\"> rules: {\n</span><span class=\"token prefix deleted\">-</span><span class=\"token line\">   \"gridsome/format-query-block\": \"error\"\n</span><span class=\"token prefix deleted\">-</span><span class=\"token line\">    ...\n</span><span class=\"token prefix deleted\">-</span><span class=\"token line\"> },\n</span></span>};</code></pre>\n<h2 id=\"references\"><a href=\"#references\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>References</h2>\n<ul>\n<li><a href=\"https://eslint.gridsome.org/user-guide/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://eslint.gridsome.org/user-guide/</a></li>\n<li><a href=\"https://eslint.vuejs.org/rules/#priority-a-essential-error-prevention-for-vue-js-3-x\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://eslint.vuejs.org/rules/#priority-a-essential-error-prevention-for-vue-js-3-x</a></li>\n<li><a href=\"https://garywoodfine.com/gridsome-configure-your-development-environment/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://garywoodfine.com/gridsome-configure-your-development-environment/</a></li>\n<li><a href=\"https://front-end.me/tool/eslint-prettier/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://front-end.me/tool/eslint-prettier/</a></li>\n</ul>\n"}},{"node":{"id":"169223197dff39ee65639770e94468d0","title":"Lint-staged와 Husky를 이용해 자동화 하기","path":"/blog/2020/11/14/lint-staged-and-husky/","date":"14. Nov 2020","timeToRead":3,"author":[{"id":"go2zo","title":"Go2zo","path":"/about"}],"tags":[{"id":"lint-staged","title":"lint-staged"},{"id":"eslint","title":"eslint"},{"id":"husky","title":"husky"}],"excerpt":"lint-staged와 husky를 이용해 eslint와 커밋 메시지에 issue 번호 지정을 자동화 한다.","content":"<h2 id=\"husky란\"><a href=\"#husky%EB%9E%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><a href=\"https://typicode.github.io/husky/#/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Husky</a>란?</h2>\n<p>Husky는 node 환경에서 git hook 제어를 용이하게 해 주는 툴이다. 기본적으로 git hook은 로컬저장소의 <code>.git/hooks</code> 디렉토리에 위치해 있으며 이 디렉토리는 git 버전관리의 대상이 아니다. husky는 hook을 공유 가능하도록 해준다.</p>\n<p>husky를 설치하면 모든 git hook은 husky를 실행하도록 설정된다. 실제로 husky를 설치하고 <code>.git/hook</code> 디렉토리를 확인하면 모든 hook 파일들이 활성화(.sample이 붙어있지 않은 파일들) 되어 있는 것을 볼 수 있다. husky에 의해 생성된 파일들은 수동으로 변경하지 않아야 한다(<del>고 알고 있다</del>). 어차피 변경을 해도 변경사항은 공유되지 않을 것이다.</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1510 254' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-3d765710c04763280d901e3809cfb72e'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-3d765710c04763280d901e3809cfb72e)' width='1510' height='254' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAALCAYAAADP9otxAAAACXBIWXMAABYlAAAWJQFJUiTwAAAFNElEQVRIx4VWa3MaRxDUr4iTctmKJd5vOI7jOJ4SIGSwUPQAISHrFQUHOQ5RShVVKl%2bSP97pPu1VYUpKPmzt7d3ObE9Pz%2byttR8SsI83Ubj6FtnRW7za8/CqVcE3TQffeUWst1y83i6jUPKw3T9Dc3eM7v41dkdzlLb34e1OsDW8RI3fnK0h6oMp3N4E%2b%2bNzNBt19Ho9OI6DdruN0WiEnZ0dTCYTHI/HGB4doWCXsB4K4V0kglAkiu/DEYSjUcRiMUTNHAytg3fa69twvcFZzxtmyF7r9XAYm5GX/Wms3Z9WcNjI4qxmYeQV0G%2b6eO%2bWcOjYGJRIQCKON/EowskMopkCEsk0kukc7IKNccXDRauDbcvGiVvx1yflMj42tnDaaCGZTHCkkEgkYFkWcrkc10mk0mk0ikVMax4GRQs/WAWMbAvb2SxO7CLKqRQiBBtfCT54VkDNTAbHtNEse41j%2btor5OGlUzji82W5RL9FuOmX/a39WanhwnZw73mYEfyVbeOUxr94Lj65DlwCPqTzQT6LXjaDWDSCTTJbiMf4vYQZiery/bRkYc79C9qdE1iVwQcZ0wjTJsJsxJQxPtcJ6oa2%2b1YeH52Sf54Af%2bacI2FBdkOcoysZVPY/MNBbnicSrmg3Ldk4pz%2b9uy47mFXKmFdczOmvSXyBwlYVsfbYrPoOFrUKgTw52RObdHxCBbRzWd%2bJQB7xXTIe94EVSYwOueGBvXyOPhx8qVbwie8cZlAHrspNQ1mQfYOgggAOSfhvtP2VQ4FpTy2T9pXgcsRXFCD7gSHgnirSrIzvE7eIfKh7/lqqkN8%2b9xZIqkflVTkKJjm%2bAuYErEAkvSENFjTQxtesy4Cpt8zYO1NnAhMxBIg4Ze09CZAPyVhBZEjSata%2bCoCZqDNAEa6ABVTEKXPCsEt/j/UqvjCYn9wysvQXWSFAe2SvgIVDdiIgyLyIPeD6jt/1XntEjBSmMwN/awsyOKOBsq3xwIOlgAsa/NWsE4DjBxhIUhJSo8qTUYEW%2b1LJlGCkhkCGYlqHJEzWVyXcYO3%2byH1jEi8/N0ZBIlHPfxCH/KjGNw3xy/Z7LB3t13kHxYKfcfm6M6X0M31KtVn2sED2TyUV/boEFqpjBn5LoyvOB7kMLjnPaDyn899rT6wJsJyKcQEXizpIIDskQKC1TwAEToe%2bCYV9sjaW6jgIQIFd017ZVxCyVdaCWo2appV4pnvru84UHilEtreGTL2fGTXdL2EPv9QExztdjHg1tV1Ko9VCv9PBYaeNHpviPr95lHqdDlQ3LdatOrW6qjIsWWmoB0gpkr8I2CEISfyMjUmlFdT1agkocH0XeTMG0qWdwJ6ahqZgYi8QINWpvlWySopKQCSIEPUsqbZicKqpRp65An0CDsYn/n1cbTbRHw7RJhkWbwPLKaNUqfh39KaRjTIZlICaytzUnwiQZLXWOKWClB0RImAC698EJgvyITK1RwpQtqS0Ce2kqglJUSloz/LdH8zyo6tOBKsZqsmpYaoURKiCL6WS/n9A6P/%2bA44GAwz5s9IhAR%2b6XVgMLBEJI8ePeRqklxpa3AyxaVEZAqkDdQWpwSgANSCRovpTlkWafKhpKhNRU4vq8lNTvyqZhblB5FMES/oZY/dcM5WP9aXmrCBlp3fBz9BL/xFfEfCZYPu66iifR1NLan5%2bN%2bVaQYRWJci1GFagkqsC/7vV8DMiJUjSyqp%2bSrTnH367M8oImtGWuQalAP8a5DUsRYhMqUY2IkU4ViW8mpD40hUbf6bp/tf4F8pCgjJb7JDCAAAAAElFTkSuQmCC' /%3e%3c/svg%3e\" width=\"1510\" alt=\"image-20201113161622506\" data-srcset=\"/assets/static/image-20201113161622506.82a2fbd.65251bbb0fe7f18a4664bbd75a01e136.png 480w, /assets/static/image-20201113161622506.cbab2cf.65251bbb0fe7f18a4664bbd75a01e136.png 1024w, /assets/static/image-20201113161622506.286da2b.65251bbb0fe7f18a4664bbd75a01e136.png 1510w\" data-sizes=\"(max-width: 1510px) 100vw, 1510px\" data-src=\"/assets/static/image-20201113161622506.286da2b.65251bbb0fe7f18a4664bbd75a01e136.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/image-20201113161622506.286da2b.65251bbb0fe7f18a4664bbd75a01e136.png\" width=\"1510\" alt=\"image-20201113161622506\"></noscript></p>\n<h2 id=\"lint-staged--husky-설치\"><a href=\"#lint-staged--husky-%EC%84%A4%EC%B9%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Lint-staged &#x26; Husky 설치</h2>\n<p><a href=\"https://mrm.js.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">mrm</a>은 오픈소스 프로젝트의 환경 설정을 동기화 하기 위한 도구이다. lint-staged도 지원하고 있으며 공식문서에도 아래와 같이 설치하도록 안내하고 있다.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">npx mrm lint-staged</code></pre>\n<p>어떻게 설치되는지 보려고 package.json에서 lint-staged관련 설정들을 모두 지우고 실행해 봤다. 아래와 같이 <code>pre-commit</code> 시 <code>lint-staged</code>가 실행되도록 설정된 것을 볼 수 있다.</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">// package.json</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"husky\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"hooks\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"pre-commit\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"lint-staged\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"lint-staged\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"*.{js,vue}\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint --cache --fix\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"commit-message에-issue-number-자동-삽입\"><a href=\"#commit-message%EC%97%90-issue-number-%EC%9E%90%EB%8F%99-%EC%82%BD%EC%9E%85\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Commit message에 Issue Number 자동 삽입</h2>\n<p>Husky를 이용해 npm script만 사용 가능한 것은 아니다.</p>\n<p>쉘 스크립트도 실행 가능하고 복잡한 스크립트는 파일로 따로 작성하여 호출할 수 있다.</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">// package.json</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"husky\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"hooks\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"pre-commit\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"lint-staged &amp;&amp; your-custom-script.sh\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이를 이용해 commit message에 issue 번호를 삽입하는 기능을 추가해 보려 한다.</p>\n<p>해당 기능은 commit message를 준비하는 과정으로 <code>prepare-commit-msg</code> 훅에 속한다.</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">// package.json</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"husky\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"hooks\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"pre-commit\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"lint-staged\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"prepare-commit-msg\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./scripts/add_issue_number_into_commit.sh $HUSKY_GIT_PARAMS\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>실제 동작하는 스크립트는 아래와 같이 작성되었다. (<a href=\"https://www.huskyhoochu.com/npm-husky-the-git-hook-manager/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">huskyhoochu님의 블로그 글</a>을 대부분 참조했다.)</p>\n<pre class=\"language-sh\"><code class=\"language-sh\">#!/usr/bin/env bash\n\nCOMMIT_MSG_FILE=$1\n\nbranch_name=`git rev-parse --abbrev-ref HEAD`\ncut_number=`echo ${branch_name} | cut -d '-' -f1`\nfirst_line=`head -n1 ${COMMIT_MSG_FILE}`\n\n# if commit_msg_file's first line is empty,\n# add branch name in commit_msg\nif [ -z \"$first_line\" ]; then\n    sed -i \".bak\" \"1s/^/[#$cut_number] /\" $1\nfi</code></pre>\n<p>스크립트 실행 시 <code>HUSKY_GIT_PARAMS</code>로 git 파라미터를 bypass로 전달한다.</p>\n<table>\n<thead>\n<tr>\n<th>Index</th>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>$1</td>\n<td>COMMIT_MSG_FILE</td>\n<td>이 변수가 가리키는 <code>.git/COMMIT_EDITMSG</code> 파일은 커밋 시 출력되는 메시지를 담고 있다.</td>\n</tr>\n<tr>\n<td>$2</td>\n<td>COMMIT_SOURCE</td>\n<td>merge, message, template, commit 등 커밋의 종류를 나타낸다.</td>\n</tr>\n<tr>\n<td>$3</td>\n<td>SHA</td>\n<td>최근 커밋 수정(commit -amend)의 경우에는 커밋 hash 값을 추가로 받는다.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"references\"><a href=\"#references\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>References</h2>\n<ul>\n<li><a href=\"https://www.huskyhoochu.com/npm-husky-the-git-hook-manager/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.huskyhoochu.com/npm-husky-the-git-hook-manager/</a></li>\n</ul>\n"}},{"node":{"id":"c7b6d5591ddbc47d59ee52bd2f6ff0cc","title":"Lint-staged를 이용해 Eslint 자동화하기","path":"/blog/2020/11/13/use-the-lint-staged-to-automatic-eslint/","date":"13. Nov 2020","timeToRead":4,"author":[{"id":"go2zo","title":"Go2zo","path":"/about"}],"tags":[{"id":"lint-staged","title":"lint-staged"},{"id":"eslint","title":"eslint"}],"excerpt":"lint-staged에 대해 알아본다.","content":"<h2 id=\"반복적인-번거로운-lint\"><a href=\"#%EB%B0%98%EB%B3%B5%EC%A0%81%EC%9D%B8-%EB%B2%88%EA%B1%B0%EB%A1%9C%EC%9A%B4-lint\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>반복적인, 번거로운 lint</h2>\n<p>필자는 지식이 얕아 lint를 코딩 룰 체크용도만 주로 사용한다. 항상 코딩 단계에서 콤마나 세미콜론을 챙길 수 없기에 주기적, 혹은 커밋 직전에 <code>eslint --fix</code>를 이용해 일괄 수정한다.</p>\n<p>하지만 lint를 매번 일일이 실행하기도 번거롭고 특히 깜빡하고 실행하지 않고 커밋하는 경우도 종종 발생하게 된다. 협업을 할 때도 원격 저장소를 pull하면 단순히 다른 개발자와 indent 설정이 tab이냐 space냐에 따라 충돌이 일어나기도 한다.(이것은 lint 말고도 <a href=\"https://editorconfig.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code>.editorconfig</code></a>로도 처리가 가능하긴 하다.) 비단 팀 프로젝트 뿐 아니라 1인 프로젝트라고 이런 일이 발생하지 않는 것은 아니다. 어느 지나가는 블로그 글에서 봤는데 <strong>1인 프로젝트에서의 맴버는 미래의 나</strong>라는 말이 참으로 와 닿았다. 커밋 전에 linting을 하지 않으면 미래의 내가 지금 나한테 욕을 할지도 모른다.</p>\n<p><code>git hook</code>은 존재만 알고 있고 <code>lint-staged</code>는 뭔지 알지도 못하던 와중에 현재 블로그를 만들며 참조한 스타터에 해당 패키지가 설정되어 있었다. 하지만 왠지 설정에 뭔가 누락된 듯하고 실제로 동작도 하지 않고 있었다. 왜일까? <code>package.json</code>에 설정된 <code>gitHooks</code> 항목이 있는데 dependencies에도 추가적인 것이 없고 어떤 라이브러리인지 도통 알 수 없었다.</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">// package.json</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"gitHooks\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"pre-commit\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"lint-staged\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"git-hook-이란\"><a href=\"#git-hook-%EC%9D%B4%EB%9E%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><a href=\"https://git-scm.com/book/ko/v2/Git%EB%A7%9E%EC%B6%A4-Git-Hooks\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Git Hook</a> 이란?</h2>\n<p>git은 commit이나 rebase, merge, push 등의 이벤트가 발생할 때 훅을 이용해 특정 스크립트를 실행할 수 있도록 지원한다. 이벤트마다 <code>pre-</code>, <code>post-</code>로 시작하는 훅들이 대부분 존재하며 의미대로 이벤트 전, 후에 실행된다. 아래 이야기 할 <code>lint-staged</code>는 커밋 전에 실행되는 <code>pre-commit</code> 훅을 이용한다. lint를 이용한 코드 검사 외에도 새로 추가한 코드에 주석을 달았는지 여부 등을 검사하여 커밋된 소스들의 일관성을 유지할 수 있다.</p>\n<h2 id=\"lint-staged-설정\"><a href=\"#lint-staged-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>lint-staged 설정</h2>\n<p><a href=\"https://www.npmjs.com/package/lint-staged\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code>lint-staged</code></a>는 이름에서도 보이듯이 stage 상의 git 파일들에 대해 lint를 실행한다. 실질적으로는 lint 만을 실행한다기 보다 설정한 명령을 실행한다는게 맞을 것이다. stage 상태란 것은 쉽게 말해 <code>git add</code>로 커밋 대상이 된 파일들이다.</p>\n<p>실행을 위해 <code>package.json</code>에 아래와 같이 작성한다. (<code>.lintstagedrc</code>파일을 이용할 수도 있다.)</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">// package.json</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"precommit\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"lint-staged\"</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token property\">\"lint-staged\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"*.{js,vue}\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"yarn lint\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"git add\"</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>위 <code>pre-commit</code> 훅 호출방식은 현재 <code>deprecated</code> 상태이다. 그럼에도 아직 아래와 같이 실행이 가능하긴 하다. 아래는 vue 파일을 수정하고 커밋을 실행 화면이다.</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1824 556' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-4f4fc2aa3508638bb4c6ec894f7ceb77'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-4f4fc2aa3508638bb4c6ec894f7ceb77)' width='1824' height='556' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAUCAYAAAA9djs/AAAACXBIWXMAABYlAAAWJQFJUiTwAAAFZklEQVRYw81Y6W7bRhDWa7RAY4ukSPGmFNvVTd33bUmRYwMN0Pd/hq/fLMmYcZ0LiAP9GM2xM7s759IutB4t3Bz/Ilzhal3DH70G3jVv8K51hz%2b7dwjrHbRHe8TzBwx3/yKenhDPzsQf0BxuUe/OMVh/wmSxQxx3sFitUG80MJlOEVWrOB5PeHx6QrvdRieOsdlu8XetBqNkwiqXYVqWglKKM1rAIpSpk%2bG3gILPH9%2bw4eiEkoUqDwtNCwEv6BGCsgXHNEhr1CvCNDTqGQQdLsEydJQJtllCQFuP2DFN6hkIaWtoGvRikesmbbhGeZl0YNvcu4zQLpMuo0I%2bIo6IE9p%2bc%2bdVAGa%2bh03oYR546Hou9qGPke8qfkqQ9R7luzDAuRJikPJD4mXgIyY98X2sSS%2bpf4wCrEj3ub4i3%2bZ6THqSgtgMuP%2bU9N%2bOrc5suQ4W5PukR56syZ4uvLRC3jQAAx4oB9cdB2MeWiO%2b5cUEmrxYgyA6ctGYtAREdOTy2dosdVb2kOC0KRdaMtv1EmfGxDe0ec/MipNib7xS9vl2%2bC0V4PBHIm1LK6QlKeXnpQoiy3gnlbmpjZfqZ7ZurqfNtIfNVyDf39%2bC3zIDGsxUll0pyz1LVGBImVTAgS2xDZKyn3N9kGZUcEPZuLhjNodpVn%2bmZH8mCG8WAHFMyj3rdcHzlO7QQXF2lNL3YRIYKXcZWMZXyvYSMvvDAcj6VapAZoDwq1zGpcz11MHMYe3Fs5WVu/UD5X9JzqsAeHbSvzKwnvvaVs%2bUT3BTPgM/xZUUBy/ssznipjgPouNcXAWw/FuqBTjp3YSey9R3yph5juLHrArhF9Tpkx%2bRn3siszFJX5F2%2bmJI5cgzKhNf8DD3rAkvc8Iqi%2bOXAQXPj2A7Hi/FSe8FcD2f2EcYVeAHERyuBWGEIKrCcV3SFXh%2boNa8QGxdftWxPUpllMwEFE0wFG8pLGDmQNbzvGU9yzM6L8/bvWabl%2bX3%2btp5mV7hfN5gPIpxe1PFcjnEdDrCZDLAw8MB69UIjUYV8/kM5/OOn7NNbLdTjIYx9Ya4309QrVbguiVEEb8gQ34JehYqFROVyFS86yZytUba9xNadISOqBcEiZ7Q1ar52SYvF1pk79%2bbylb4KHeG0FGY7Cl3CIPkDKGDlA7StexcVQG77TWeHq8xm%2bnodnXsdtd07BqNuobj4Qr7XRHdWMP9/RXqdQOb9TW/%2balHu/3uSm306Z9rBYd7DXHHQLtVwn6v4cOpiGajRBsN5w9FBlpHq1liUEuYTnSsVhp6PQOLhY5eN8GrlY7xWMdoZGBNuy7lYtdul9R%2bu63GBBhYUncx1xXf4drHj0Umh2ujZC/Z43Qsot9LdOVeg76BCeWzqa7uJIEpTKeyocasc6NOsuHTE/mxQceTy242ujLebDTc3ZnK0dNRQ5POxJ2SCqAcaBjP5Sb0S/5zOeZKOV/SoiO0ZCYvz69nOq/ZZmdkLZE//yXImmoBL%2b1523ZZGj6FDjTNoJKlFLLNbLv8BZ/1asYL/lWD6Vfu9d0huJzPcTgc2P9LluCCLbBjlm85/Bw6ZvAypgLTNHPP1rcvnuCfhS8df6bfxj7zpbDm3%2b/r9Zq9t%2bIcmCl4fHzk4Jvj9vaWQyZkrwQKvny7v5e98sVC/jukcDocsWXWJfvb7Rb9fp8D754zYYLhcMjeHitaKqRWq7FdvP99wHzvg%2bZSvvpe3snmh1xhTCe3u61y8Hw%2bq0BIRVSrVaXg8u0Xp6UlZEYIb%2bU%2bffPR/BpcYhDkPuJTQUr94eGBT1usyv50Oim%2b1WrxieqpoIhcsi%2bVIf/aknkgm8gGEqQsmhKc/CH59Uttg/8AcTib9X7%2b2YEAAAAASUVORK5CYII=' /%3e%3c/svg%3e\" width=\"1824\" alt=\"this is deprecated\" data-srcset=\"/assets/static/image-20201113114525996.82a2fbd.c3f1245bb2f177c4d1b8bde2c5a9d8c6.png 480w, /assets/static/image-20201113114525996.cbab2cf.c3f1245bb2f177c4d1b8bde2c5a9d8c6.png 1024w, /assets/static/image-20201113114525996.11f2004.c3f1245bb2f177c4d1b8bde2c5a9d8c6.png 1824w\" data-sizes=\"(max-width: 1824px) 100vw, 1824px\" data-src=\"/assets/static/image-20201113114525996.11f2004.c3f1245bb2f177c4d1b8bde2c5a9d8c6.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/image-20201113114525996.11f2004.c3f1245bb2f177c4d1b8bde2c5a9d8c6.png\" width=\"1824\" alt=\"this is deprecated\"></noscript></p>\n<h2 id=\"나머지는-다음-포스트로\"><a href=\"#%EB%82%98%EB%A8%B8%EC%A7%80%EB%8A%94-%EB%8B%A4%EC%9D%8C-%ED%8F%AC%EC%8A%A4%ED%8A%B8%EB%A1%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>나머지는 다음 포스트로</h2>\n<p>위 실행화면과 문서에도 나와있듯이 <code>lint-staged</code>를 제대로 사용하기 위해서는 <code>husky</code>가 필요하다. 대부분의 타 포스트들에는 <code>lint-staged</code>와 <code>husky</code>를 함께 설명하고 있다. <code>husky</code>를 이용해 lint를 자동화 하는 것과 커밋 메시지를 컨트롤 하는 부분에 대해서는 다음 포스트에 진행한다.</p>\n"}},{"node":{"id":"ced2f84927d90f30150800d7d211d0fc","title":"Gridsome으로 Blog 만들기 (2) - 포스트 작성","path":"/blog/2020/11/11/make-blog-with-gridsome-2/","date":"11. Nov 2020","timeToRead":3,"author":[{"id":"go2zo","title":"Go2zo","path":"/about"}],"tags":[{"id":"blog","title":"blog"},{"id":"gridsome","title":"gridsome"},{"id":"gh-pages","title":"gh-pages"}],"excerpt":"Gridsome 프로젝트에 첫 포스트를 생성하고 gh-pages에 배포한다.","content":"<h2 id=\"첫-포스트-작성\"><a href=\"#%EC%B2%AB-%ED%8F%AC%EC%8A%A4%ED%8A%B8-%EC%9E%91%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>첫 포스트 작성</h2>\n<p>마크다운 파일들이 각각의 웹페이지로 변경될 때 경로는 glob 패턴으로 작성되며 이에 대한 설정은 <code>gridsome.config.js</code>에 있다.</p>\n<p>기본적으로 <code>title</code>을 사용하도록 설정되어 있는데  <a href=\"https://en.wiktionary.org/wiki/kebab_case\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">kebab case</a>로 변환하여 사용한다. <code>title: Say hello to Gridsome 🎉</code>이라면 생성되는 경로는 <code>/say-hello-to-gridsome</code>이 된다.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// gridsome.config.js</span>\n<span class=\"token punctuation\">{</span>\n  templates<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token maybe-class-name\">Post</span><span class=\"token operator\">:</span> <span class=\"token string\">'/:title'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token maybe-class-name\">Tag</span><span class=\"token operator\">:</span> <span class=\"token string\">'/tag/:id'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>여기서 한가지 문제가 있는데 한글이나 특수문자가 지원되지 않는 것이다.</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> Gridsome으로 Blog 만들기 (1) <span class=\"token punctuation\">-</span> 환경 설정</code></pre>\n<p>위와 같이 작성하는 경우 생성된 경로는 <code>gridsome-blog-1</code>로 의도하지 않은 결과이다. 이를 해결하기 위해서 front-matter을 <code>path</code> 항목을 새로 만들고 gridsome 설정을 변경하였다.</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> Gridsome으로 Blog 만들기 (1) <span class=\"token punctuation\">-</span> 환경 설정\n<span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> make<span class=\"token punctuation\">-</span>blog<span class=\"token punctuation\">-</span>with<span class=\"token punctuation\">-</span>gridsome<span class=\"token punctuation\">-</span><span class=\"token number\">1</span></code></pre>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// gridsome.config.js</span>\n<span class=\"token punctuation\">{</span>\n  templates<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token maybe-class-name\">Post</span><span class=\"token operator\">:</span> <span class=\"token string\">'/blog/:path'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token maybe-class-name\">Tag</span><span class=\"token operator\">:</span> <span class=\"token string\">'/tag/:id'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>번거롭긴 하지만 한글 제목을 위해서 아직까진 어쩔 수 없는 선택같다.</p>\n<h2 id=\"github-pages-설정\"><a href=\"#github-pages-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>GitHub Pages 설정</h2>\n<p>GitHub Pages는 개인 혹은 프로젝트 별로 GitHub에서 제공하는 웹사이트이다. (이미 많이 알고 있을 것이므로 자세한 설명은 생략)</p>\n<p>이미 과거에 저장소는 생성되어 있었고 Jekyll 프로젝트가 배포되어 있는 상태였다. 최신 흐름에 맞춰 <code>master</code> 브랜치를 과감히 날려버리고 새로운 소스를 <code>main</code> 브랜치로 푸시하였다. <code>{account}.github.io</code> 저장소는 기본적으로 master(혹은 main) 브랜치를 이용해 호스팅을 한다. 하지만 원본 소스도 저장하기 위해 호스트 브랜치를 <code>gh-pages</code>로 변경했다. <code>Settings > Options > GitHub Pages</code>에서 변경이 가능하다.</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1808 728' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-44d718b4121d38ac9344e332a2c4cac1'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-44d718b4121d38ac9344e332a2c4cac1)' width='1808' height='728' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAaCAYAAAAHfFpPAAAACXBIWXMAABYlAAAWJQFJUiTwAAAF3ElEQVRYw91YaXPbNhDl//8J/dRP7XSmk07bjJMmqa3EtmxZ90UdpCSSkihS90XqIKnXXVCH7TiJW9exEydv9sASFIEF9gHS23fHiCeSSKbSuLiMkZ7CSeQDMtmc8F1Rm%2bu64L/NZvPdQbqKJ2A0W8jm8jg9i6JWb0Ct1fDnyyMcvX6DKA3KdDrbD8D39ifdJ4g/3Pd9%2bEEQYqez9HfSP9hBcNPe6cJ/u%2b1gB9f7JD3Yx99%2bxyE%2bCDZb%2bd9AAxDwJ9L/rcS3M8ub/2FZSld1FyVziXxzgVjNQUJbQjMH0LQGMrQsinIJMqFcqUJRa9B0Q%2bi60USlqqDdNiGXyqgqqojlJdTpWMgXisKuk83LS6F2y7bRbLVFP7l8Qfi4v0w2j3K5goamib44hvspFGXRR5Xew22slyiOYzRNF1nw4CXQn3noTT3MFj6MwYqwxmS%2bwGg0Qr8/gGl2YHe7GJI9Go0xnc2EfzgM2yfTKWy7K%2bxery/ieM9o0UfY3Z6wuyypfTKZinh%2bjgeD2waDodiDuI/ZbE5xQ3p%2bivFkIjAajzEgH7%2bbYziebZae5z94c5ZM2DA3BHRhbWGiR%2bijgwFhSL6h0NnX3vv7Am2KPdhhDD9//Rlz/2xPYNd3W7T1RSzHtDe9G3Eh%2bjfea25tRtO3YTwAzcCGVAkMMErrBmRC2dOFzij7OtmUess65FU99Ik4DYUVPePRcvBDKXsHu7gO9Z1dDT6PSvDlmDuxYTQfAANSZk7rl35kolvAUfYYp1ocr/IRvC2d4kS9wBv5FC8uj4TvVS6CvwoneFvL4kWthReKhiNDx0%2byht9qOl7qOn4p6/hV0fF7Q8cfhPddAxpaUIIW1GcIqRxo25EMs4BnvLQDz/Zu5n32XcuMIJxpnnnOBtk76DzrO1tkwOb5QuoEtJ78ngDrH2PwCT%2bt3VvyUz7TJ%2bmH8rlBQrA5FFUWbBN28j7Y7ONxTT/Ye3pxHdf7uKv9K0HiWhsjOpxKZ6gcNZ8f2eFy9Yj/pBbVYJ1IhUGERCViYluWgEkEx%2bpQcev10KX6axG54Ro9HAyo3tNy4TjiBwzWua4PqI11s8N2F32y26Yp6jbX/9l8LvjFeDwRzzE/YJ4xnzuwJj5awzWYl1hjT%2bgrL3j0Q5jUpR%2bj21S3iWiozTaqehP1dofYoIVkQUaNCA3ritFCmwiM0e2jQYNVq9UFO2vQ4FUVRbA23TAEI7QsG/VGQ3wcM70dg2TCw3GNhiZslfpgNsgESW6vBBttEhFT7RVyhkvkzHv0Q5iEWhnIXALFNKAUALUIVHKhXs0DNRmoy6FkfzYG%2bN490/du/d8ugUc9DfrJKFqyjGQijUwihTRBIa5dyGSRoKNwkhB59zfOIxFYlLKL82P4oz5lhY0ffvwZLcqWfLGEs%2bgl0sTpbcqQ5WqN9drD3FkgWyhDrqgYUqYxdeUPun2KE74tbuuPngFB4gzORQTzTByTeBTjq3PMUzHYp8foR99jcPEBrZM36J1H4BbS8I5fwp9OMHOXUOsare0Zcfoxenw%2bIDl3XKzWa3FQ4YHg9tF4Cnex3B9evsaH3X8AFi6wdABvSZJ0ZwasSffXoXSmgDsP/dOxkJ/94bc2mRu7uQA%2ban/KgZB4Q7tKZZChDa9YUZCTy0jni0jlCqjSDH%2bNMvekGdClcsTnbT638%2b7NXEDs8LRT81l/sViIXZpL4IyOwmzzHaHrhv4FpTaXP/Yz%2bAg72YLjHcfBYrmGswowcX24JGeLAFM6fgfPIQM0OsDwhQWXJP5gRQ0vNric8ZmeLyC4ncEXIFy2%2bEKEyx9favDzfIHKFyQGIZFMiQsLHkD2F4tFtKwBiuYaUcVBrbtCSnORaNDArLynHwB%2bN9%2b/fenq6ZHyf1sen3AAfCpHVSIq78%2biiCfTOL%2b8oplWcX4Rw0UsQYhjOpvvS9hd4JJ2H9YVfKQ//VW7tPY8OLSeuYT1B0NRznhtj7Y2Y7FcfjFLvtlr8R0Z%2bVzKP%2bTa%2bbnjHz9oF35j%2b1WAAAAAAElFTkSuQmCC' /%3e%3c/svg%3e\" width=\"1808\" alt=\"gh-pages setup\" data-srcset=\"/assets/static/image-20201112142857796.82a2fbd.cfdf605752fdfb3e34161d0eb072a624.png 480w, /assets/static/image-20201112142857796.cbab2cf.cfdf605752fdfb3e34161d0eb072a624.png 1024w, /assets/static/image-20201112142857796.e29974d.cfdf605752fdfb3e34161d0eb072a624.png 1808w\" data-sizes=\"(max-width: 1808px) 100vw, 1808px\" data-src=\"/assets/static/image-20201112142857796.e29974d.cfdf605752fdfb3e34161d0eb072a624.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/image-20201112142857796.e29974d.cfdf605752fdfb3e34161d0eb072a624.png\" width=\"1808\" alt=\"gh-pages setup\"></noscript></p>\n<h2 id=\"github-pages에-배포\"><a href=\"#github-pages%EC%97%90-%EB%B0%B0%ED%8F%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>GitHub Pages에 배포</h2>\n<p>기본적인 배포 과정은 다음과 같다.</p>\n<blockquote>\n<ol>\n<li><code>gridsome build</code>로 static site 생성</li>\n<li>저장소에 push (<code>gh-pages</code> 패키지 이용)</li>\n</ol>\n</blockquote>\n<p>이미 스타터를 통해 모두 추가되어 있긴 하지만 잠시 설명을 하자면 퍼블리싱을 위한 <code>gh-pages</code> 패키지를 설치한다.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> -D gh-pages</code></pre>\n<p>아래 두 스크립트가 빌드와 배포를 실행하게 된다. 배포전에는 빌드가 되어야 하므로 배포 스크립트에 빌드를 추가하였다. 스크립트가 없다면 <code>package.json</code>에 추가하면 된다.</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">// package.json</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"gridsome build\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"deploy\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"gridsome build &amp;&amp; gh-pages -d dist\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>배포를 실행해보자.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">yarn</span> deploy</code></pre>\n<p>정상적으로 배포가 완료되면 웹사이트에 접속하여 확인할 수 있다. (실시간으로 배포되지는 않지만 그리 오래 걸리지도 않는다.)</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 2556 1324' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-dc1825da44e9e4075712aa8b1f456a0b'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-dc1825da44e9e4075712aa8b1f456a0b)' width='2556' height='1324' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAhCAYAAABpwa0hAAAACXBIWXMAABYlAAAWJQFJUiTwAAAI3UlEQVRo3tWZ%2bVNUVxbH%2bQ%2bm5odkkhi2RhbphR2NIrtAEJpWbEBkUSKLgksAFUMAFRUQDSJos2hDSwMNDTRbs0bBuCQzk5rUpDKpyszUzC/zw/w0lan5fT5z32uaIsZKNAlT1T9865577rn3vfu955z77n1uEQfrkRApsLvwElFr2JF3QejrcLa7It4Rc5AQmVvPjkMNRBVckusbbdy2510icg0VTWbO3rRS0z5G9lkDYQcvsD2vcb3dVSDNKSL3ItpT7eirbxNd1MSesuvknDOQcbrdMadDDlu3kIwTOBGqO0nYvlOEC4QJeWPbT4E03gvxY%2b3P4ee%2bg1MO1n6/3c3TR8E6FAo8FN4yJPk7bT8B7t5euHt58raAu5cXHt7OsR3jy/U1SDZbPD1ke8lW7ust9fH6ee%2bh%2bOG6m9fWrWwGPH188Fcq2abRoAwKwl%2blxnfbNnz8/VD4%2beLt64tvoD%2b%2bygD8hF6y0YSGEajWsE2tJkDYByilPoF4btI7StgUAqTJbfHw4OzlFkzzq3RYphlafMzo4iOa22%2bxMzqK8B07KXyvkIqKo%2bTn7aPzoytMjE/S3W2iq8vIzVu3afnoBmXlFTKZnj4uRIAEya0Tswopa%2bqkoqWTmc%2b%2b4ut/fIuh10RUVDRJ8fGcPpLPrfNVXKuv4WZbG5caL9Pe0cWdHiPN169xrqGG6jPVMqESCS5FgBRfEUmp5Jw6z56Sw5zpvMPko2ecra0nWKOmSJvEXNtlPrcYGWlvpfnqDU5Wnaa0qpTiqgqOVZ2gSpBTcLRozQNcjAB34QGZBTmUfnCaBH0quqJ83qsu4WCuFn9fbyr2JdF//iRLhptMd3fQ3dmFyTTE2fpKDp3OJ/dMLvpTOaQd1YrxXJEAhQ/a1Fj0umgOZiVTUZxDfc0pas%2bdISJYzYcFmdjamvly2srfVpcYN5kZs9oZG7HSeqOJsg/LyK7MJ61Y65i8q%2bUAd28FOZnJVJfn03D%2bfe719DI0MkX3PQuH9FnUF2byuakTa20l8zeuMto/zMDgJKPWKSbGrJj7ezlZW0Hq4fRNW/1NJWCLpxeV758UGb0XQ88AZus8A9Y5BocnMXQaOK5Pp7U4m/bC/dgu1vDF0jI22wJWQcCkbYrFWRv2KQt1DefkcHK9bVB81FwWiW188mPuW2YZGJllYmqJBw%2bfMT44zHjdMRbbxdbX2sBFESp3SgqZ6TcyOjrD9OQ00%2bNW5iatXL5w3nUJqLvYwqhtieGxOewLj1gRk//k8e9YsFpZaDzOb%2b9cYbo0GWupjmPx0XReqGdk1M7MlB37zAwzNisX6mpcl4CGxlam7A%2bZnXvIysozgac8fPiEFbudp8YbfLm8RGd6KEPlWcxPzNJ7dwjz0AQTtlkW5xdZWVqk7XqLaxLwlvgSvNL8EcvLT1hcWOHBg8csLDxkaekRk%2bYB2o7q6H7/PSriIqgO96G/4QP6zDaM/RYsI5PCC2ZZXV6mTXwNuiwBrdfbWV19ypx9mYX5BywtrrCw9An3Wq7SdfwQf1m0MXWzhavJ2%2bkoP0KP2CF67w0xYB5lYGCY6alpmpqaxQFK4ZoEtLV1sLryRLi0Xaz%2bA0HEEnPiPNBzsRZDaRbffvGMx51Xqd%2blpPGgnp5eM9299%2bkzDXLPeJ%2bJiXFaW1tdlwCDwcAnj54yP7ckVv8BU1PzjI3NMNrdjamxjs/6O/nP13/gjwN3uZmfw%2b1bd0QfI8Y%2bM3fv9mGxDHG99Zr8TeF6BIgk2C5Ofo9FCExN2rFNzDAyYsMybKOxKJvy3UFcKtAzVlPCPz/9mH998SnTJhMdt7q429svCDBiNptputwoe4CnKxLQ3HKN6Wk7g4MWBocs9PcPYh4Y5U5tFXmh3uSH%2bHA%2b3J1VQwv89Sv%2b/fsnmLt7uS2dCA3dGI1G6upqXTMEtnh6ygTMzMzKk7eMjDI8bMVy38z9Kw2cyIijThfHn/o6%2bO/fv%2bGboR7%2bbOriU8swPYZeTMY%2b%2bvr7uXCxwfUIcJ4Gc3IPcbqyiuMVJyg7Xk75qUqO5GaREupPbIiSgpQ4LF2dmG93UHMwk%2bqcA1QeO8bhI0UcLSmh5FgpWTlZrnUW2Hh2l7zgTXd3OSFKkGWh2yJOim%2b4e/AbgV%2b99hq/fv113hD6twRpb6zZOrHFy2s9/jeDiE3zADkU1sJhIxx3hYHsio4mfPt2dsfGErFjB77bAsSR1%2bd79l6bOPlfnICNqy%2bVHvIts8CaLOneFiuqDgkRIXGc4tJSioqLKS4rIygsTPYY5xjrfdf6PT/%2b/52AV3mwZOvj78/WgAD5Jlgq/QID126F/VH4%2bcmrK5XPy5Kts3T2keqv%2bvxflIDnV%2bCHIF%2bIilULF26dmJwsIyY%2bnui4OBKSkohNSCAqJoYEoZd0khyXmCiHQpRAcmoq0cJeqscKfdK77xIWGbm%2bE7zsO7wsCT/JAxzx%2bf34Vsi6raL0XXPjDT9BvuPSaz8oBKQ8ISU5Dyd5G0h0lyASo/xsKR/8GDbLA9YHFQ8J0AThowpCoXRAkp1w6rwFtqqDZXgrg0WbQ/YV8NMEo1A5dIo1SGM%2bj21BwQKO8kXtL4YG71cMl1ciQFplP3UQe3aqSd6lJvEdFTHbHYjfoSJ9t5K0KCWp4nATFamS27PjlCTtdMhRkWrCwzTsj1GRsktFRrRS7uOv1qxPQpIl%2bDlLlVqGU/8i%2bKk062O8ar5we5mYcmZlqYOvICBttwp9bCB5iSrykoLIF9gXq0EXG8T%2bOA2HkzUcTVGTFq2hJEUQslvIAgmChF0RKnITlOhi1BQkachJ0Mir7JyMJCuDQ1CFhBIolaFhqMPCUYq6ck0n2UilUyfZSjqJKGmRnDvHy8BNysovCykjK8UWFrUnhfg0HTsTRbk3g8T0fcQk7yUhLYPYlDSSdXoS9mpJz9QTn6plj9AnpmlJ3ZdJqm6/0KUTl7KXtAPZspySriXjgF606UR5gHe1Gehzc0nam0b6/kx0%2biwyMg84bDJ0JIrEGJeULNtqMzPJzssTulSHN4id41Xm9D9Ke9kM4LE/LAAAAABJRU5ErkJggg==' /%3e%3c/svg%3e\" width=\"2556\" alt=\"deployed blog\" data-srcset=\"/assets/static/image-20201112190623964.82a2fbd.f48fb203586631a59f74df1a1f90a930.png 480w, /assets/static/image-20201112190623964.cbab2cf.f48fb203586631a59f74df1a1f90a930.png 1024w, /assets/static/image-20201112190623964.2665e34.f48fb203586631a59f74df1a1f90a930.png 1920w, /assets/static/image-20201112190623964.0555f23.f48fb203586631a59f74df1a1f90a930.png 2556w\" data-sizes=\"(max-width: 2556px) 100vw, 2556px\" data-src=\"/assets/static/image-20201112190623964.0555f23.f48fb203586631a59f74df1a1f90a930.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/image-20201112190623964.0555f23.f48fb203586631a59f74df1a1f90a930.png\" width=\"2556\" alt=\"deployed blog\"></noscript></p>\n"}},{"node":{"id":"4bb6ff4779c5a9d62887c3d517232104","title":"Gridsome으로 Blog 만들기 (1) - 환경 설정","path":"/blog/2020/11/10/make-blog-with-gridsome-1/","date":"10. Nov 2020","timeToRead":6,"author":[{"id":"go2zo","title":"Go2zo","path":"/about"}],"tags":[{"id":"blog","title":"blog"},{"id":"gridsome","title":"gridsome"}],"excerpt":"Vue.js 기반 정적 사이트 생성기(Static Site Generator, SSG)인 Gridsome을 이용해 프로젝트를 생성하고 초기 개발 환경을 구성한다.","content":"<h2 id=\"prerequisite\"><a href=\"#prerequisite\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Prerequisite</h2>\n<ul>\n<li>NodeJS</li>\n<li>Npm or Yarn</li>\n</ul>\n<hr>\n<h2 id=\"gridsome-설치\"><a href=\"#gridsome-%EC%84%A4%EC%B9%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><a href=\"https://gridsome.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Gridsome</a> 설치</h2>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># Npm</span>\n$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g gridsome\n\n<span class=\"token comment\"># Yarn</span>\n$ <span class=\"token function\">yarn</span> global <span class=\"token function\">add</span> gridsome</code></pre>\n<hr>\n<h2 id=\"프로젝트-생성\"><a href=\"#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%83%9D%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>프로젝트 생성</h2>\n<p>기본 프로젝트로 생성하면 설정들을 일일이 해나가는 번거로움이 있다.</p>\n<p>Gridsome 공식페이지에 제공하는 <a href=\"https://gridsome.org/starters/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">스타터</a>를 이용하면 개발을 쉽게 시작할 수 있다.</p>\n<p>본인은 의도한 형태와 가장 유사한 <a href=\"https://gridsome.org/starters/bulma-starter/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Bulma Starter</a>로 시작하려 한다.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">gridsome create go2zo.github.io https://github.com/calebanthony/gridsome-bulma.git</code></pre>\n<hr>\n<h2 id=\"디렉토리-구조\"><a href=\"#%EB%94%94%EB%A0%89%ED%86%A0%EB%A6%AC-%EA%B5%AC%EC%A1%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>디렉토리 구조</h2>\n<p>Gridsome의 기본 디렉토리 구조는 다음과 같다.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">.</span>\n├── package.json\n├── gridsome.config.js\n├── gridsome.server.js\n├── static/\n└── src/\n    ├── main.js\n    ├── index.html\n    ├── App.vue\n    ├── layouts/\n    │   └── Default.vue\n    ├── pages/\n    │   ├── Index.vue\n    │   └── Blog.vue\n    └── templates/\n        └── BlogPost.vue</code></pre>\n<p>우선 크게 건드릴 필요 없는 것들은 제외하고 설명하면 다음과 같다. 자세한 설명은 공식문서에 잘 나와있다.</p>\n<ul>\n<li><strong>gridsome.config.js</strong>: 플러그인 설정 등 Gridsome 프로젝트에 대한 설정을 다룬다.</li>\n<li><strong>src/layout</strong>: 페이지나 템플릿에서 사용하는 레이아웃 컴포넌트들을 구현한다.</li>\n<li><strong>src/pages</strong>: 이 디렉토리의 컴포넌트들은 각각 웹사이트의 url 된다. 가령 <code>src/pages/Index.vue</code>는 홈페이지가 되고 <code>src/pages/AboutUs.vue</code>는 <code>hostname/about-us</code>가 된다.</li>\n<li><strong>src/templates</strong>: 템플릿은 collection 노드들에 대한 단일 페이지를 생성한다. 가령 포스트(md파일)가 웹페이지로 변환될 때 해당하는 템플릿을 이용하게 된다.</li>\n</ul>\n<h2 id=\"블로그-확인\"><a href=\"#%EB%B8%94%EB%A1%9C%EA%B7%B8-%ED%99%95%EC%9D%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>블로그 확인</h2>\n<p>로컬 환경에서 웹서비스를 띄워 생성된 블로그를 확인한다.</p>\n<p><code>gridsome develop</code>이나 <code>yarn develop</code>으로 실행한다.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">$ gridsome develop\n\n DONE  Compiled successfully <span class=\"token keyword\">in</span> 978ms\n \n  Site running at:\n  - Local:                 http://localhost:8080/\n  - Network:               http://192.168.219.106:8080/\n   \n  Explore GraphQL data at: http://localhost:8080/___explore</code></pre>\n<p>접속하여 페이지가 정상적으로 뜨면 성공이다.</p>\n<h2 id=\"eslint-설정\"><a href=\"#eslint-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Eslint 설정</h2>\n<p>Gridsome을 위한 Eslint <a href=\"https://eslint.gridsome.org/user-guide/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">플러그인</a>이 있다.</p>\n<blockquote>\n<p>처음 연습 시 <a href=\"https://gridsome.org/starters/gridsome-blog-starter/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Gridsome Blog Starter</a>를 사용했었는데 해당 스타터는 eslint 설정이 되어있지 않아 직접 설정했다. <a href=\"https://gridsome.org/starters/bulma-starter/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Bulma Starter</a>는 eslint 설정이 아래 나와있는 것보다 더 잘 되어있어 추가적으로 수정한 부분은 <code>.eslintignore</code> 뿐이다.</p>\n<p>만약 스타터를 이용하지 않거나 선택한 스타터에 eslint 설정이 되어있지 않다면 참조하면 될 듯 하다.</p>\n</blockquote>\n<h3 id=\"dependencies-설치\"><a href=\"#dependencies-%EC%84%A4%EC%B9%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Dependencies 설치</h3>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># Npm</span>\n$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> eslint eslint-plugin-gridsome vue-eslint-parser -D\n\n<span class=\"token comment\"># Yarn</span>\n$ <span class=\"token function\">yarn</span> <span class=\"token function\">add</span> eslint eslint-plugin-gridsome vue-eslint-parser -D</code></pre>\n<blockquote>\n<p><code>eslint-plugin-gridsome</code>은 <code>vue-eslint-parser@^6.0.4</code> 버전 이상을 사용하고 있다.</p>\n<p>다른 eslint 플러그인을 사용하는 경우 <code>vue-eslint-parser</code> 버전을 주의해야 한다.</p>\n</blockquote>\n<h3 id=\"eslintrcjs-설정\"><a href=\"#eslintrcjs-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>.eslintrc.js 설정</h3>\n<p><a href=\"https://github.com/gridsome/eslint-plugin-gridsome/blob/45395586e812167f1c1eb7e9c02d4e4a86b2b9ff/lib/configs/recommended.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">gridsome/recommended</a> 문서를 참고하여 작성하였다.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// .eslintrc.js</span>\nmodule<span class=\"token punctuation\">.</span><span class=\"token property-access\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  parser<span class=\"token operator\">:</span> <span class=\"token string\">\"vue-eslint-parser\"</span><span class=\"token punctuation\">,</span>\n  parserOptions<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    ecmaVersion<span class=\"token operator\">:</span> <span class=\"token number\">2018</span><span class=\"token punctuation\">,</span>\n    sourceType<span class=\"token operator\">:</span> <span class=\"token string\">\"module\"</span><span class=\"token punctuation\">,</span>\n    ecmaFeatures<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      jsx<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  env<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    browser<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    es6<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">extends</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"plugin:gridsome/recommended\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<h3 id=\"packagejson-설정\"><a href=\"#packagejson-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>package.json 설정</h3>\n<p>Eslint 실행을 위한 스크립트를 추가한다.</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">// package.json</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"lint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint --ext .js,.vue src/\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"eslintignore-설정\"><a href=\"#eslintignore-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>.eslintignore 설정</h3>\n<p>기본 생성되는 <code>main.js</code> 파일은 eslint에서 에러를 유발한다. Rule을 변경하기에는 애매하여 제외하도록 설정했다. 명령어에서 추가할 수 있지만 향후 예외 파일이 추가될 가능성이 있기 때문에 <code>.eslintignore</code>를 이용했다.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// .eslintignore</span>\nsrc<span class=\"token operator\">/</span>main<span class=\"token punctuation\">.</span><span class=\"token property-access\">js</span></code></pre>\n<h2 id=\"dev-tools-설정\"><a href=\"#dev-tools-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Dev Tools 설정</h2>\n<p>Gridsome 프로젝트를 진행하기 위해 아래와 같이 두개의 에디터를 사용한다.</p>\n<ul>\n<li><a href=\"https://code.visualstudio.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Visual Studio Code</a>: 프로젝트 전체적인 관리</li>\n<li><a href=\"https://typora.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Typora</a>: Markdown 편집</li>\n</ul>\n<blockquote>\n<p>VS Code로도 마크다운 편집이 가능하지만 개인적으로 마크다운 에디터는 Typora를 선호한다. 두개의 에디터를 사용하면 사소한 불편사항이 생기긴 한다. 가령 VSCode에서 디렉토리를 변경하게 되면 Typora는 반영이 되지 않아 재부팅을 해줘야 한다. 혹은 실수로 양쪽에서 동일한 md 파일을 동시에 수정하는 불상사가 생길 수 있지만 크게 우려할 정도는 아닌것 같다.</p>\n</blockquote>\n<h3 id=\"vscode-설정\"><a href=\"#vscode-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>VSCode 설정</h3>\n<blockquote>\n<p>설치는 VSCode의 Extensions 탭에서 검색 후 설치하면 된다.</p>\n</blockquote>\n<h4 id=\"vetur\"><a href=\"#vetur\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Vetur</h4>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=octref.vetur\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Vetur</a>는 VSCode를 위한 Vue 도구이다.</p>\n<p>Vue 기반인 Gridsome과 완벽히 동작한다.</p>\n<h4 id=\"graphql\"><a href=\"#graphql\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>GraphQL</h4>\n<p><a href=\"https://gridsome.org/docs/data-layer/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GraphQL data layer</a>는 개발 모드에서 사용할 수 있는 도구이다.</p>\n<p>Vue 컴포넌트 내부에서 <code>&#x3C;page-query></code> 또는 <code>&#x3C;static-query></code> 블록으로 쿼리를 작성할 수 있다.</p>\n<p>아래 설정을 통해 .vue파일 내부에 작성된 GraphQL 구문을 분석할 수 있다.</p>\n<ol>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=kumar-harsh.graphql-for-vscode\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GraphQL for VSCode</a> 설치</li>\n<li>\n<p>Preferences > Settings을 열어 <code>vetur grammar</code> 검색</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1862 464' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-8d5c4ae2fbf4e115c514410346c6a40e'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-8d5c4ae2fbf4e115c514410346c6a40e)' width='1862' height='464' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAQCAYAAACm53kpAAAACXBIWXMAABYlAAAWJQFJUiTwAAAEPElEQVRYw9VWXW8bRRT1f%2bhDQFCReL0ftmM7/oi/7bXj2F7b62/HNg5SojZt0yikPBRVjahAvPHCE0KqBBLih/CGQFS88X8Oc8aZyBinCqhVk4ejO3NnZnfuuefeXY9pGrDCUQS2swgmMhKBRPoCGYRT%2bVuJUDKHQHweh4xrex4b/eF0QaylYJomPIbPh2iujIcnp7h3/wj3jx7g%2bPEJHh0/xunZE0ymH8PtdNHt9dG5JWj3BnhwfIIXX32N8xdf4tn5F3j67Dk%2bf36Og3tHci1ba8MwDHhM3SdZae7N0BpO0B7P4IpxczhFZ/IJKm4fxboL27klqLdgl3fgNJoYjkYYDOfodHvo9Qeo1h3UnQbiOXtOgCVkYFoWNN3AuleD5tPl2Kv55JzWJ%2baGacGw/DcbIiAtHMcHozOsjT7Dnd4p1gZneG94hvdHT3Cn/6m0a5OnuLs7hiWS72Ed%2bP0WKjs7GA2HCIdCqFQq6HY7aDgO2q6L6u4uAn6/rBnrpkIk0a9r2EgUYH77CyIv/4D13a8Iff8bij/9idQPr5D58RUSL39H%2bue/8OHDb2B6P5oTsLm5iVwuB9u2EY/HERIkRKNROU4kEtja2kIwGEQgEJBYHP83/N9z14RIkhWKYL3QxHrRxYbA%2bgK0Ulv4WtgodaAlbViyB1ywR0sJcUyr67qETzRJ5VfwCb8lleO/XPNfKERBPVM9l5bPU%2bO3Q0IQwYAfm4a2EkHdOx8LGzR8svQ96qK0zHSpVEKj0UC1WoUjSmBHlEY%2bn5dZVwFtC1VEBVLZrCwXqiedTsuzxWJRKolnaOnbFSVE64gGxDH3UGFvDbH4ldiKxaQNhSPzz6AKXhFBEnjJTCYjA4uJA2SXGVbqaNRrSFaqyFYdTPb2JFEMak%2bMB4MB%2bv0%2bXNE72u02ZrMZDg4O0Ov1cHh4iP39fbkeiUQuEQ6HJVh6i361Rst7qX3L5xb3r9qn9nKNIEl81yUBigQGx0yTAAZPEniQ0l0sAV3zwheJIV9voOO24IpAm82mPKfIoILoo0JqtZqcUwWtVksqjORwzD3dbleCBKq5OktCua998Y6haNSc00/Qr87zufV6Xe4jyfRxzmSMxCeRMTGefxCwmH1lNU277AHL9cy68Yu/Rz0ah90UGZ5Oxc/SFFMBvpQXIngZXpaZ51xdmCSwXEhuKpWSyIpSYsmQOLVGm0wm5Zrap1Sp9vCMShR96oxao1VzPkc19JUELJKwjH/5DUFMfBvRvI2yqHPbLsleUSgUJPgy1ROUn5ZgSa2S52IJLMv8KsmvkvpVflUCqk%2bsJODaEATosQRyNQdOTUi7XJYNj3Kj1MtiTvkycJaUCo5YvMS7wGsVcH0CRAlEoig3XdkEO52OlPd4PJa1Rqh6JvvM%2brsM%2bo0ToH6emFl%2bIThmppdBv3rpTcIbIYD2Oj8n/HzeRKg4/gYip4HMpQi4igAAAABJRU5ErkJggg==' /%3e%3c/svg%3e\" width=\"1862\" alt=\"vetur grammar setup\" data-srcset=\"/assets/static/image-20201110173717709.82a2fbd.ee6cfe1a5b5aa168e68efd236ca988fe.png 480w, /assets/static/image-20201110173717709.cbab2cf.ee6cfe1a5b5aa168e68efd236ca988fe.png 1024w, /assets/static/image-20201110173717709.df90ef8.ee6cfe1a5b5aa168e68efd236ca988fe.png 1862w\" data-sizes=\"(max-width: 1862px) 100vw, 1862px\" data-src=\"/assets/static/image-20201110173717709.df90ef8.ee6cfe1a5b5aa168e68efd236ca988fe.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/image-20201110173717709.df90ef8.ee6cfe1a5b5aa168e68efd236ca988fe.png\" width=\"1862\" alt=\"vetur grammar setup\"></noscript></p>\n</li>\n<li>\n<p><code>settings.json</code>을 열어 아래와 같이 추가</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">// settings.json</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"vetur.grammar.customBlocks\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"docs\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"md\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"i18n\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"json\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"page-query\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"graphql\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"static-query\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"graphql\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</li>\n<li>\n<p>VSCode Command 실행: <code>Vetur: Generate Grammar</code></p>\n<blockquote>\n<p>단축키 <code>Shift + Ctrl + P</code> (MAC은 <code>Shift + Cmd + P</code>)으로 실행</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"typora-설정\"><a href=\"#typora-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Typora 설정</h3>\n<p>캡쳐 도구로 <a href=\"https://app.prntscr.com/en/index.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Lightshot</a>을 사용한다. 캡쳐한 이미지를 클립보드에 복사하여 Typora에 붙여넣으면 자동으로 이미지를 저장한다. (이 외에 업로드 기능도 제공한다.)</p>\n<p>기본적으로 Typora 설치 폴더 하위에 저장하는데 <code>content/posts/images</code> 하위에 저장하도록 설정하였다.</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1396 958' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-dedc9eee3a25f08d13bf4a268f67ee55'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-dedc9eee3a25f08d13bf4a268f67ee55)' width='1396' height='958' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAsCAYAAADVX77/AAAACXBIWXMAABYlAAAWJQFJUiTwAAAKZ0lEQVRo3u1aSW9jWRn1r0AguoZMTpzE9vMU23HmwU6c2XHiOHHmeaikqpJK0p0CUk1VKb1AKgELWqBe0FAbWLFiwx/ohl4ioS6WrBEtIQQSOnznOvf1iyuJ49gpKFSLo%2b%2b%2b%2b%2b7ze99533ifbaM%2bD55FgvAEAgiHQggJGhoaUFlZierq6ryw2%2b1wOp3wer3weDxKXoR856%2b6phTgfXw%2bH2x9bhcOQwEYfj%2bCwaBCQMioqqpCTU1NQQQQ/FEN63EhD/YmlNfSViaKfrOiAmVlZbh7966JCpkrLy9XktZwHkiSJoBKut1u1NXVmeA8ZW1trRrzPG/qFtKdznp17HK5BE4lDcO4EUUvO2ezixIBefiBgQEMDw9jaGhIQR9TxmIx9PT0mOBxPB5HS0uLIoIPTwUHBwdxcnKCvb09bG5uYmVlBQ8ePFDHq6uraG5uVu7V2zuAZHJSfqcPIyMpjCRScp8EwuHGEinvh4dSlPTkWWujApFIRD0sH5QPvLOzoxR4%2bPAhtra2kMlkMDU1ZWJychIzMzOKHE0AGQ2Hw2qut7cH0e4utApBPSSrtxctVF5cyy1rw6FGIaMNAT/jTgSRxmY15/V44XI6T63iunDC47TDazhNEi4lgGZMU2xtbTXBN2uVbW1tZ87rOcYLEqBdgCZc63Cgr38AqekZJCbSGElNKJmcnMJ4ZlphNJ3GmBDJNWNTGUwImenZWTVOjo9j/JpIjY8hkUwjmPkxjJYEvO56IcF3qUvYdKAjERf5%2bmUxgNfqIOgTuISEe0uL%2bPTZMV6efB8//c4hfvH8CX71g4/wyZPH%2bMkHj/Cz776Pnz/9nprn%2bU%2bOj/Dyo6f4%2bH2xwNVlrIv1bW5sYKMgbGJrcx2Lazswdr5AXecK/IYDXl/gcgIc8sZIgk57DFiFgNfS9Lyn5mYI492hBiw2uDHjq1eY9tVhIWQIPGcwHzQwL/OUc4JlGcebwmgUd2lualIxo1A0yXUEYw11q6%2bvPxNgSYKVCBsjPU2a/t7X16civ05vVwGt4EwdIJgQ0z58doJHHz7FB89PsC8yvbiMYXGFhLhCIj2VledgXNwjXQQmJiYkZk0pnV68eIGFhQUcHBygq6tLEaFTspkF%2bOZ50N/fr3xam/VVcaYOYIoTuRLrxJP%2bLnw4FMOLTBInIlc7m9HZ3Y2eaFQhJuOoPFRUZOwUPI7JuagFfPBunjsdExxzTs9TWtdFozFlAalUylxH3XTatVqDTfv/nTt3VM7XSl2LAK8QYHgw0tWBhf4eTHR3YLglguHWZiTjPYiLhTGF0lQpmTZpdVoBvoSuzi50dHSoINvZ2anmNBlczyzDt8t5XsvrmJo5JnidHvNt815czwqXQZ33YrbSJNiodGNjI9bW1jA2Nma6wHUI0P7VKgoMJEYxJumyd2AQgzJOiXkmRkYk74%2bYD8/7MXrrMU2YCvKYkvVIIpFQ61l3cC2PqfDo6Kj6La6lZHrmHNclk0l1DUmmwr2ShkkqwWtJhkmAToPWtFaIFeQS4JeSenw8hSF5W3Nzs5g89cu0gApNT09jcXFRPdz8/LxSmvfWx/RZmi5rDa7VDz8raZIEWP1dpT5Zqwli4abP0VpYq5AYHlOSVCp%2brgvQEnT9r5W358H5zZA0GW4H/D66A2/mNm%2bqK0YSzmOaqI7SnHOeFkHsRUgkJcHfpk9zTkvO0ZQ55u9QWsc62Ol5/XuvlcLsAehfrPimpzPKjDin6gMScRnOECA39IiiUoZ6pz6Gv2UAC3PytpeW1G/Ozc2pN8qSmJJvjxbB%2b7IKpdmy%2bqQr6LSqXYogYdbji%2baugpxeoFLeQl2WWVXNucUSKk%2bVrMoLu0qD9YoAdQOR7vgu/JFupMZGlaLa93Qgo9/qqM5jEkI34FqaMxuoQjrIYpok2%2b31L3B77feCz3Bn7XORAs7lxR/Udbe2/ghHzwP4XNWivDQhUs8brWPwNUTQ0d6mlGf0ZXHCqE5FqTglwT6E8wSDMc%2b1t7eXvDO8sBf41qOvEHj%2bd6z%2b8l9Y%2bvSf6PvRP/CNvb/h1uFXeO8gD/b/im8f/RuOwWP4nFXKCgxvAJ6FXyPYlcLm%2brKY9ZZ6wzRxmj%2bD2b179yQQLqkmi2%2bd848fP1bj3d1dLC8vq9hwk1ZgEnBr%2bxVu73wJ%2b94rVO/9GZW7r5Cdy8qL8aXgT3jv4V/giB8IAXZlAaoYMr72USpCqQMf4wWR3Rdwm8HRenxe3Z7v%2bNoEVBktsHvaUOFqQbmrGZXuFlQ4m1DujKBKxjx/OVpR7wmq6J/tBcQCln8Df3sSS/PT2N65r4Ib0xtbbaY3yu3tbZWm2MgsSaBkijo%2bPlZpjwTpSJ%2b7o5RbyhZNQEXZbXS0NWNrYwWL8zNYXpjF/GxGHn4GwYAXlXK%2bukqKo8qy1yHzdpFOCaI6CKqHa5J86wuhMRxS/kz/Zxxg2mIRQn/nHNMS/V43L5zXqVHvKHHMpkunS45zs0RRBNjt1XKzegTkAaiEn7lXxj5/AA65WTbfS21wDtS8ne2wpRv0SBwYOECgKYp4bwwjUrmxGiMBLFpYkLDo4ZvWhQzHnGNaZDHDjMF0SKtglmAhpUtmxhOeNzvQIjLAa4UQq0BKPbZbcn3%2bSpAWYGTjwMQP4W3qkzSYUH06KzEqp3eaWBcQdAuaP4mgslSOLsJUyHMMmLx2fX1dSRLFAMpxoUHSai3WatCWr%2bS9yvncXsDtC8vD%2bc1NUT6srvT0BinXcZ49u95R4hzP63M6KHJOd3LFugDXs%2bSnK5oWUAxerwSl3Fz7LYLdk9hYXcSSpDSmO1Z7fNv3799XaY9vmtZweHio3IBjztNSGCAZHGn6DJQMmvyN80rZQkEi6VZMyxyXkICvo7TR0Kq2ohobwyrAMfjpnRodFBn0KFkRhtQHmWyA1IGSBRLXcMyWViufW8peJwbwt/jbJbUAKq5NtK622vweoLfcNPR1nHc4akzzZjlNcFeXpbnVBfT3hGKUz73ejAGlIEDvsjCN0WyTyTHzGwNNjUFL9/48z2BHk2Yg5GZFQwPTJUvgTrVdHo3G1XGpvhNYt8fPzQKlIIBgquLGCv2aoP/S5%2bnD3HNkiUvf5vcHxgOWvdzgCIUiQkZaov%2bI9AIxmZvA4FBS%2bohuMzjmdocFdX6XfCQpqQtQ0syZVnVq5RruMunPbJS8hi5ANzEMj%2bpAsy6QzRo1NdXKPXSJfH1IWjacKjhf9JGk5EGQJazegaGZ0xVoCZyj5L4Ag5r%2bOms1R1aFe3uPcHR0hP39fZUVaCmFYxkrS/NIL%2b0isPk7uCOD8BpnP5LcCAHa5FjV0b9JANtbmjkLHe7dkRDm4dx2l8eM%2bCx69Cc6FkKMF4VjBrMzUxjNbKA%2b8xKucO/pp7I3QAChTdlaz%2bv6Pmv2xrkpjZLnsxnCYXaO14VL3Ep9J/S434wLWCPsef8RsM5d1N7mrisOvrxfim%2bMgOv%2bYeGmcOG3wf8FAv6beEfAOwLeEfCOgIK%2bBv%2b/EGB%2bGSplL/C2vX3z63Ax4N4hqzzdY79tsOnt5muVmqfXsQHSOzlvE4LBEP4DIktG/E3KbcUAAAAASUVORK5CYII=' /%3e%3c/svg%3e\" width=\"1396\" alt=\"typora setup\" data-srcset=\"/assets/static/image-20201111112515777.82a2fbd.f8de46afe733c28705d51ddedac30d3c.png 480w, /assets/static/image-20201111112515777.cbab2cf.f8de46afe733c28705d51ddedac30d3c.png 1024w, /assets/static/image-20201111112515777.cc50315.f8de46afe733c28705d51ddedac30d3c.png 1396w\" data-sizes=\"(max-width: 1396px) 100vw, 1396px\" data-src=\"/assets/static/image-20201111112515777.cc50315.f8de46afe733c28705d51ddedac30d3c.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/image-20201111112515777.cc50315.f8de46afe733c28705d51ddedac30d3c.png\" width=\"1396\" alt=\"typora setup\"></noscript></p>\n<h2 id=\"다음은\"><a href=\"#%EB%8B%A4%EC%9D%8C%EC%9D%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>다음은...?</h2>\n<p>이번 포스트는 기본적으로 개발환경을 구성하는 부분까지만 다뤘다.</p>\n<p>다음에는 새로운 포스트를 작성하고 깃허브 페이지에 배포하는 것을 다루도록 한다.</p>\n"}},{"node":{"id":"179290e569edfa6d85146ed810405ec8","title":"Blog 새단장","path":"/blog/2020/11/09/blog-reopening/","date":"9. Nov 2020","timeToRead":3,"author":[{"id":"go2zo","title":"Go2zo","path":"/about"}],"tags":[{"id":"blog","title":"blog"}],"excerpt":"오랫동안 묵혀둔 블로그를 정리하기 위해 관련 기술들을 알아보았다. Jekyll 다음으로 Hexo를 사용할까 생각하고 있던 와중에 Vue.js 기반 정적 사이트 생성기(Static Site Generator, SSG)인 Gridsome을 알게 되었고 새로이 블로그를 만들기로 했다.","content":"<h2 id=\"묵혀둔-블로그를-꺼내다\"><a href=\"#%EB%AC%B5%ED%98%80%EB%91%94-%EB%B8%94%EB%A1%9C%EA%B7%B8%EB%A5%BC-%EA%BA%BC%EB%82%B4%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>묵혀둔 블로그를 꺼내다</h2>\n<p>Github pages를 이용해 블로그를 만들려는 니즈는 아주 오래전부터 있었다. 당시 가장 관심을 끌었던 것은 <a href=\"https://jekyllrb.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Jekyll</a>이었다. 그런데 Jekyll은 테마를 바꾼다던가 플러그인을 손보다가 스타일등이 꼬여버리는 일이 종종 있었다. 물론 내가 ruby에 미숙하여 그런 비상상황에 제대로 대처하지 못한 이유가 클 것이다.</p>\n<p>그러다 약 3년전인가... 예전 팀원들이 정보 공유용으로 기술블로그나 만들어볼까 할때 Javascript 기반의 <a href=\"https://hexo.io/index.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Hexo</a>를 처음 접했다. <a href=\"https://gohugo.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Hugo</a>도 함께 고려됐지만 Golang은 러닝커브가 좀 있을 듯 하여 넣어뒀던 기억이 있다. Hexo의 결과물은 Jekyll보다 마음에 들었던 것으로 기억한다. Ruby보다는 Javascript가 접근성이 좋았던 것도 한 몫했다. 하지만 역시 내 블로그는 그냥 아무 일도 일어나지 않았다.</p>\n<p>요즘들어 기억력이 옅어지며 기록의 필요성을 다시 느끼기 시작했고 로컬에 md로 저장되어 있던 기록의 단편들을 정리해야겠다는 생각이 들었다.</p>\n<h2 id=\"gatsby를-거쳐\"><a href=\"#gatsby%EB%A5%BC-%EA%B1%B0%EC%B3%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><a href=\"https://www.gatsbyjs.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Gatsby</a>를 거쳐</h2>\n<blockquote>\n<p>예전에 사용하던 기술들을 대체할 것들은 뭐가 있을까?</p>\n</blockquote>\n<p>개인적으로 가장 쉽게 찾는 방법은 구글에서 <code>Jekyll vs</code>이라고 치고 연관검색어 상위권의 것들을 살펴보는 것이다. 가장 먼저 보인 것이 <code>Jekyll vs Gatsby</code>였다. 사실 Jamstack이라는 용어도 이때 처음 접했다. 몇몇 잘 소개된 글들을 보며 Jekyll을 보내주고 최신 트랜드의 기술을 사용해 보고 싶은 충동이 생겼다.</p>\n<h2 id=\"gridsome을-선택\"><a href=\"#gridsome%EC%9D%84-%EC%84%A0%ED%83%9D\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Gridsome을 선택</h2>\n<p>Gatsby를 보고 가장 혹한 점은 React를 사용한다는 것이다. 사실 React를 직접 접해보지는 않았지만 Vue는 해본지라 그냥 친구의 친구의 친구를 만난 것 같은 반가움이랄까.</p>\n<p>그러나 왠지 Vue가 아니라 아쉬웠다. 혹시나 하며 다시 구글링 해보니 Gatsby와 아주 유사하고 Vue를 기반한 <a href=\"https://gridsome.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Gridsome</a>이 있었다. 구조적으로 Gatsby와 Gridsome은 아주 유사한 기술이었다. React는 해보질 않았고 나는 그냥 단순히 Vue빠였으므로 Gridsome이 선택되었다.</p>\n<h2 id=\"결론\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>결론</h2>\n<p>결국 무엇을 사용했냐보다 그 안을 채우는 것들이 중요할텐데... 글 주변도 없어서 벌써부터 걱정이 앞선다. 단순히 기록을 위한다는 초심을 잃지 않고 꾸준히 이어갈 수 있길 바랄 뿐이다.</p>\n"}}]}},"context":{}}