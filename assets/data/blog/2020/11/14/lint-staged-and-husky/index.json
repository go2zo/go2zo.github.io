{"hash":"15137aaa7ba1de16c5baa0a6b693c01cae1ff0a4","data":{"post":{"title":[],"date":"14. November 2020","timeToRead":3,"content":"<h2 id=\"husky란\"><a href=\"#husky%EB%9E%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><a href=\"https://typicode.github.io/husky/#/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Husky</a>란?</h2>\n<p>Husky는 node 환경에서 git hook 제어를 용이하게 해 주는 툴이다. 기본적으로 git hook은 로컬저장소의 <code>.git/hooks</code> 디렉토리에 위치해 있으며 이 디렉토리는 git 버전관리의 대상이 아니다. husky는 hook을 공유 가능하도록 해준다.</p>\n<p>husky를 설치하면 모든 git hook은 husky를 실행하도록 설정된다. 실제로 husky를 설치하고 <code>.git/hook</code> 디렉토리를 확인하면 모든 hook 파일들이 활성화(.sample이 붙어있지 않은 파일들) 되어 있는 것을 볼 수 있다. husky에 의해 생성된 파일들은 수동으로 변경하지 않아야 한다(<del>고 알고 있다</del>). 어차피 변경을 해도 변경사항은 공유되지 않을 것이다.</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1510 254' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-3d765710c04763280d901e3809cfb72e'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-3d765710c04763280d901e3809cfb72e)' width='1510' height='254' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAALCAYAAADP9otxAAAACXBIWXMAABYlAAAWJQFJUiTwAAAFNElEQVRIx4VWa3MaRxDUr4iTctmKJd5vOI7jOJ4SIGSwUPQAISHrFQUHOQ5RShVVKl%2bSP97pPu1VYUpKPmzt7d3ObE9Pz%2byttR8SsI83Ubj6FtnRW7za8/CqVcE3TQffeUWst1y83i6jUPKw3T9Dc3eM7v41dkdzlLb34e1OsDW8RI3fnK0h6oMp3N4E%2b%2bNzNBt19Ho9OI6DdruN0WiEnZ0dTCYTHI/HGB4doWCXsB4K4V0kglAkiu/DEYSjUcRiMUTNHAytg3fa69twvcFZzxtmyF7r9XAYm5GX/Wms3Z9WcNjI4qxmYeQV0G%2b6eO%2bWcOjYGJRIQCKON/EowskMopkCEsk0kukc7IKNccXDRauDbcvGiVvx1yflMj42tnDaaCGZTHCkkEgkYFkWcrkc10mk0mk0ikVMax4GRQs/WAWMbAvb2SxO7CLKqRQiBBtfCT54VkDNTAbHtNEse41j%2btor5OGlUzji82W5RL9FuOmX/a39WanhwnZw73mYEfyVbeOUxr94Lj65DlwCPqTzQT6LXjaDWDSCTTJbiMf4vYQZiery/bRkYc79C9qdE1iVwQcZ0wjTJsJsxJQxPtcJ6oa2%2b1YeH52Sf54Af%2bacI2FBdkOcoysZVPY/MNBbnicSrmg3Ldk4pz%2b9uy47mFXKmFdczOmvSXyBwlYVsfbYrPoOFrUKgTw52RObdHxCBbRzWd%2bJQB7xXTIe94EVSYwOueGBvXyOPhx8qVbwie8cZlAHrspNQ1mQfYOgggAOSfhvtP2VQ4FpTy2T9pXgcsRXFCD7gSHgnirSrIzvE7eIfKh7/lqqkN8%2b9xZIqkflVTkKJjm%2bAuYErEAkvSENFjTQxtesy4Cpt8zYO1NnAhMxBIg4Ze09CZAPyVhBZEjSata%2bCoCZqDNAEa6ABVTEKXPCsEt/j/UqvjCYn9wysvQXWSFAe2SvgIVDdiIgyLyIPeD6jt/1XntEjBSmMwN/awsyOKOBsq3xwIOlgAsa/NWsE4DjBxhIUhJSo8qTUYEW%2b1LJlGCkhkCGYlqHJEzWVyXcYO3%2byH1jEi8/N0ZBIlHPfxCH/KjGNw3xy/Z7LB3t13kHxYKfcfm6M6X0M31KtVn2sED2TyUV/boEFqpjBn5LoyvOB7kMLjnPaDyn899rT6wJsJyKcQEXizpIIDskQKC1TwAEToe%2bCYV9sjaW6jgIQIFd017ZVxCyVdaCWo2appV4pnvru84UHilEtreGTL2fGTXdL2EPv9QExztdjHg1tV1Ko9VCv9PBYaeNHpviPr95lHqdDlQ3LdatOrW6qjIsWWmoB0gpkr8I2CEISfyMjUmlFdT1agkocH0XeTMG0qWdwJ6ahqZgYi8QINWpvlWySopKQCSIEPUsqbZicKqpRp65An0CDsYn/n1cbTbRHw7RJhkWbwPLKaNUqfh39KaRjTIZlICaytzUnwiQZLXWOKWClB0RImAC698EJgvyITK1RwpQtqS0Ce2kqglJUSloz/LdH8zyo6tOBKsZqsmpYaoURKiCL6WS/n9A6P/%2bA44GAwz5s9IhAR%2b6XVgMLBEJI8ePeRqklxpa3AyxaVEZAqkDdQWpwSgANSCRovpTlkWafKhpKhNRU4vq8lNTvyqZhblB5FMES/oZY/dcM5WP9aXmrCBlp3fBz9BL/xFfEfCZYPu66iifR1NLan5%2bN%2bVaQYRWJci1GFagkqsC/7vV8DMiJUjSyqp%2bSrTnH367M8oImtGWuQalAP8a5DUsRYhMqUY2IkU4ViW8mpD40hUbf6bp/tf4F8pCgjJb7JDCAAAAAElFTkSuQmCC' /%3e%3c/svg%3e\" width=\"1510\" alt=\"image-20201113161622506\" data-srcset=\"/assets/static/image-20201113161622506.82a2fbd.65251bbb0fe7f18a4664bbd75a01e136.png 480w, /assets/static/image-20201113161622506.cbab2cf.65251bbb0fe7f18a4664bbd75a01e136.png 1024w, /assets/static/image-20201113161622506.286da2b.65251bbb0fe7f18a4664bbd75a01e136.png 1510w\" data-sizes=\"(max-width: 1510px) 100vw, 1510px\" data-src=\"/assets/static/image-20201113161622506.286da2b.65251bbb0fe7f18a4664bbd75a01e136.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/image-20201113161622506.286da2b.65251bbb0fe7f18a4664bbd75a01e136.png\" width=\"1510\" alt=\"image-20201113161622506\"></noscript></p>\n<h2 id=\"lint-staged--husky-설치\"><a href=\"#lint-staged--husky-%EC%84%A4%EC%B9%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Lint-staged &#x26; Husky 설치</h2>\n<p><a href=\"https://mrm.js.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">mrm</a>은 오픈소스 프로젝트의 환경 설정을 동기화 하기 위한 도구이다. lint-staged도 지원하고 있으며 공식문서에도 아래와 같이 설치하도록 안내하고 있다.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">npx mrm lint-staged</code></pre>\n<p>어떻게 설치되는지 보려고 package.json에서 lint-staged관련 설정들을 모두 지우고 실행해 봤다. 아래와 같이 <code>pre-commit</code> 시 <code>lint-staged</code>가 실행되도록 설정된 것을 볼 수 있다.</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">// package.json</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"husky\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"hooks\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"pre-commit\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"lint-staged\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"lint-staged\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"*.{js,vue}\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint --cache --fix\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"commit-message에-issue-number-자동-삽입\"><a href=\"#commit-message%EC%97%90-issue-number-%EC%9E%90%EB%8F%99-%EC%82%BD%EC%9E%85\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Commit message에 Issue Number 자동 삽입</h2>\n<p>Husky를 이용해 npm script만 사용 가능한 것은 아니다.</p>\n<p>쉘 스크립트도 실행 가능하고 복잡한 스크립트는 파일로 따로 작성하여 호출할 수 있다.</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">// package.json</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"husky\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"hooks\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"pre-commit\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"lint-staged &amp;&amp; your-custom-script.sh\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이를 이용해 commit message에 issue 번호를 삽입하는 기능을 추가해 보려 한다.</p>\n<p>해당 기능은 commit message를 준비하는 과정으로 <code>prepare-commit-msg</code> 훅에 속한다.</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">// package.json</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"husky\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"hooks\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"pre-commit\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"lint-staged\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"prepare-commit-msg\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./scripts/add_issue_number_into_commit.sh $HUSKY_GIT_PARAMS\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>실제 동작하는 스크립트는 아래와 같이 작성되었다. (<a href=\"https://www.huskyhoochu.com/npm-husky-the-git-hook-manager/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">huskyhoochu님의 블로그 글</a>을 대부분 참조했다.)</p>\n<pre class=\"language-sh\"><code class=\"language-sh\">#!/usr/bin/env bash\n\nCOMMIT_MSG_FILE=$1\n\nbranch_name=`git rev-parse --abbrev-ref HEAD`\ncut_number=`echo ${branch_name} | cut -d '-' -f1`\nfirst_line=`head -n1 ${COMMIT_MSG_FILE}`\n\n# if commit_msg_file's first line is empty,\n# add branch name in commit_msg\nif [ -z \"$first_line\" ]; then\n    sed -i \".bak\" \"1s/^/[#$cut_number] /\" $1\nfi</code></pre>\n<p>스크립트 실행 시 <code>HUSKY_GIT_PARAMS</code>로 git 파라미터를 bypass로 전달한다.</p>\n<table>\n<thead>\n<tr>\n<th>Index</th>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>$1</td>\n<td>COMMIT_MSG_FILE</td>\n<td>이 변수가 가리키는 <code>.git/COMMIT_EDITMSG</code> 파일은 커밋 시 출력되는 메시지를 담고 있다.</td>\n</tr>\n<tr>\n<td>$2</td>\n<td>COMMIT_SOURCE</td>\n<td>merge, message, template, commit 등 커밋의 종류를 나타낸다.</td>\n</tr>\n<tr>\n<td>$3</td>\n<td>SHA</td>\n<td>최근 커밋 수정(commit -amend)의 경우에는 커밋 hash 값을 추가로 받는다.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"references\"><a href=\"#references\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>References</h2>\n<ul>\n<li><a href=\"https://www.huskyhoochu.com/npm-husky-the-git-hook-manager/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.huskyhoochu.com/npm-husky-the-git-hook-manager/</a></li>\n</ul>\n","author":[{"id":"go2zo","title":"Go2zo"}],"excerpt":"lint-staged와 husky를 이용해 eslint와 커밋 메시지에 issue 번호 지정을 자동화 한다."}},"context":{}}