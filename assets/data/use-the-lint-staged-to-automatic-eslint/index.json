{"hash":"12c81b4eaf125a746d2dbc36b277a349e8c9fed6","data":{"post":{"title":"Lint-staged를 이용해 Eslint 자동화하기","path":"/use-the-lint-staged-to-automatic-eslint/","date":"13. November 2020","timeToRead":4,"tags":[{"id":"lint-staged","title":"lint-staged","path":"/tag/lint-staged/"},{"id":"eslint","title":"eslint","path":"/tag/eslint/"}],"description":"lint-staged에 대해 알아본다.","content":"<h1 id=\"반복적인-번거로운-lint\"><a href=\"#%EB%B0%98%EB%B3%B5%EC%A0%81%EC%9D%B8-%EB%B2%88%EA%B1%B0%EB%A1%9C%EC%9A%B4-lint\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>반복적인, 번거로운 lint</h1>\n<p>필자는 지식이 얕아 lint를 코딩 룰 체크용도만 주로 사용한다. 항상 코딩 단계에서 콤마나 세미콜론을 챙길 수 없기에 주기적, 혹은 커밋 직전에 <code>eslint --fix</code>를 이용해 일괄 수정한다.</p>\n<p>하지만 lint를 매번 일일이 실행하기도 번거롭고 특히 깜빡하고 실행하지 않고 커밋하는 경우도 종종 발생하게 된다. 협업을 할 때도 원격 저장소를 pull하면 단순히 다른 개발자와 indent 설정이 tab이냐 space냐에 따라 충돌이 일어나기도 한다.(이것은 lint 말고도 <a href=\"https://editorconfig.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code>.editorconfig</code></a>로도 처리가 가능하긴 하다.) 비단 팀 프로젝트 뿐 아니라 1인 프로젝트라고 이런 일이 발생하지 않는 것은 아니다. 어느 지나가는 블로그 글에서 봤는데 <strong>1인 프로젝트에서의 맴버는 미래의 나</strong>라는 말이 참으로 와 닿았다. 커밋 전에 linting을 하지 않으면 미래의 내가 지금 나한테 욕을 할지도 모른다.</p>\n<p><code>git hook</code>은 존재만 알고 있고 <code>lint-staged</code>는 뭔지 알지도 못하던 와중에 현재 블로그를 만들며 참조한 스타터에 해당 패키지가 설정되어 있었다. 하지만 왠지 설정에 뭔가 누락된 듯하고 실제로 동작도 하지 않고 있었다. 왜일까? <code>package.json</code>에 설정된 <code>gitHooks</code> 항목이 있는데 dependencies에도 추가적인 것이 없고 어떤 라이브러리인지 도통 알 수 없었다.</p>\n<pre><code class=\"language-json\">// package.json\n{\n  \"gitHooks\": {\n    \"pre-commit\": \"lint-staged\"\n  }\n}\n</code></pre>\n<h1 id=\"git-hook-이란\"><a href=\"#git-hook-%EC%9D%B4%EB%9E%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><a href=\"https://git-scm.com/book/ko/v2/Git%EB%A7%9E%EC%B6%A4-Git-Hooks\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Git Hook</a> 이란?</h1>\n<p>git은 commit이나 rebase, merge, push 등의 이벤트가 발생할 때 훅을 이용해 특정 스크립트를 실행할 수 있도록 지원한다. 이벤트마다 <code>pre-</code>, <code>post-</code>로 시작하는 훅들이 대부분 존재하며 의미대로 이벤트 전, 후에 실행된다. 아래 이야기 할 <code>lint-staged</code>는 커밋 전에 실행되는 <code>pre-commit</code> 훅을 이용한다. lint를 이용한 코드 검사 외에도 새로 추가한 코드에 주석을 달았는지 여부 등을 검사하여 커밋된 소스들의 일관성을 유지할 수 있다.</p>\n<h1 id=\"lint-staged-설정\"><a href=\"#lint-staged-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>lint-staged 설정</h1>\n<p><a href=\"https://www.npmjs.com/package/lint-staged\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code>lint-staged</code></a>는 이름에서도 보이듯이 stage 상의 git 파일들에 대해 lint를 실행한다. 실질적으로는 lint 만을 실행한다기 보다 설정한 명령을 실행한다는게 맞을 것이다. stage 상태란 것은 쉽게 말해 <code>git add</code>로 커밋 대상이 된 파일들이다.</p>\n<p>실행을 위해 <code>package.json</code>에 아래와 같이 작성한다. (<code>.lintstagedrc</code>파일을 이용할 수도 있다.)</p>\n<pre><code class=\"language-json\">// package.json\n{\n  \"scripts\": {\n    \"precommit\": \"lint-staged\"\n  }\n  \"lint-staged\": {\n    \"*.{js,vue}\": [\n      \"yarn lint\",\n      \"git add\"\n    ]\n  },\n}\n</code></pre>\n<p>위 <code>pre-commit</code> 훅 호출방식은 현재 <code>deprecated</code> 상태이다. 그럼에도 아직 아래와 같이 실행이 가능하긴 하다. 아래는 vue 파일을 수정하고 커밋을 실행 화면이다.</p>\n<p><img src=\"images/image-20201113114525996.png\" alt=\"image-20201113114525996\"></p>\n<h1 id=\"나머지는-다음-포스트로\"><a href=\"#%EB%82%98%EB%A8%B8%EC%A7%80%EB%8A%94-%EB%8B%A4%EC%9D%8C-%ED%8F%AC%EC%8A%A4%ED%8A%B8%EB%A1%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>나머지는 다음 포스트로</h1>\n<p>위 실행화면과 문서에도 나와있듯이 <code>lint-staged</code>를 제대로 사용하기 위해서는 <code>husky</code>가 필요하다. 대부분의 타 포스트들에는 <code>lint-staged</code>와 <code>husky</code>를 함께 설명하고 있다. <code>husky</code>를 이용해 lint를 자동화 하는 것과 커밋 메시지를 컨트롤 하는 부분에 대해서는 다음 포스트에 진행한다.</p>\n","cover_image":null}},"context":{}}