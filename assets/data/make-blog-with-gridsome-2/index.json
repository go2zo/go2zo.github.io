{"hash":"12c81b4eaf125a746d2dbc36b277a349e8c9fed6","data":{"post":{"title":"Gridsome으로 Blog 만들기 (2) - 포스트 작성","path":"/make-blog-with-gridsome-2/","date":"11. November 2020","timeToRead":3,"tags":[{"id":"blog","title":"blog","path":"/tag/blog/"},{"id":"gridsome","title":"gridsome","path":"/tag/gridsome/"},{"id":"gh-pages","title":"gh-pages","path":"/tag/gh-pages/"}],"description":"Gridsome 프로젝트에 첫 포스트를 생성하고 문제점을 해결한다.","content":"<h1 id=\"첫-포스트-작성\"><a href=\"#%EC%B2%AB-%ED%8F%AC%EC%8A%A4%ED%8A%B8-%EC%9E%91%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>첫 포스트 작성</h1>\n<p>마크다운 파일들이 각각의 웹페이지로 변경될 때 경로는 glob 패턴으로 작성되며 이에 대한 설정은 <code>gridsome.config.js</code>에 있다.</p>\n<p>기본적으로 <code>title</code>을 사용하도록 설정되어 있는데  <a href=\"https://en.wiktionary.org/wiki/kebab_case\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">kebab case</a>로 변환하여 사용한다. <code>title: Say hello to Gridsome 🎉</code>이라면 생성되는 경로는 <code>/say-hello-to-gridsome</code>이 된다.</p>\n<pre><code class=\"language-js\">// gridsome.config.js\n{\n  templates: {\n    Post: '/:title',\n    Tag: '/tag/:id',\n  },\n}\n</code></pre>\n<p>여기서 한가지 문제가 있는데 한글이나 특수문자가 지원되지 않는 것이다.</p>\n<pre><code class=\"language-yaml\">title: Gridsome으로 Blog 만들기 (1) - 환경 설정\n</code></pre>\n<p>위와 같이 작성하는 경우 생성된 경로는 <code>gridsome-blog-1</code>로 의도하지 않은 결과이다. 이를 해결하기 위해서 front-matter을 <code>path</code> 항목을 새로 만들고 gridsome 설정을 변경하였다.</p>\n<pre><code class=\"language-yaml\">title: Gridsome으로 Blog 만들기 (1) - 환경 설정\npath: make-blog-with-gridsome-1\n</code></pre>\n<pre><code class=\"language-js\">// gridsome.config.js\n{\n  templates: {\n    Post: '/blog/:path',\n    Tag: '/tag/:id',\n  },\n}\n</code></pre>\n<p>번거롭긴 하지만 한글 제목을 위해서 아직까진 어쩔 수 없는 선택같다.</p>\n<h1 id=\"github-pages-설정\"><a href=\"#github-pages-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>GitHub Pages 설정</h1>\n<p>GitHub Pages는 개인 혹은 프로젝트 별로 GitHub에서 제공하는 웹사이트이다. (이미 많이 알고 있을 것이므로 자세한 설명은 생략)</p>\n<p>이미 과거에 저장소는 생성되어 있었고 Jekyll 프로젝트가 배포되어 있는 상태였다. 최신 흐름에 맞춰 <code>master</code> 브랜치를 과감히 날려버리고 새로운 소스를 <code>main</code> 브랜치로 푸시하였다. <code>{account}.github.io</code> 저장소는 기본적으로 master(혹은 main) 브랜치를 이용해 호스팅을 한다. 하지만 원본 소스도 저장하기 위해 호스트 브랜치를 <code>gh-pages</code>로 변경했다. <code>Settings > Options > GitHub Pages</code>에서 변경이 가능하다.</p>\n<p><img src=\"images/image-20201112142857796.png\" alt=\"image-20201112142857796\"></p>\n<h1 id=\"github-pages에-배포\"><a href=\"#github-pages%EC%97%90-%EB%B0%B0%ED%8F%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>GitHub Pages에 배포</h1>\n<p>기본적인 배포 과정은 다음과 같다.</p>\n<blockquote>\n<ol>\n<li><code>gridsome build</code>로 static site 생성</li>\n<li>저장소에 push (<code>gh-pages</code> 패키지 이용)</li>\n</ol>\n</blockquote>\n<p>이미 스타터를 통해 모두 추가되어 있긴 하지만 잠시 설명을 하자면 퍼블리싱을 위한 <code>gh-pages</code> 패키지를 설치한다.</p>\n<pre><code class=\"language-bash\">$ yarn add -D gh-pages\n</code></pre>\n<p>아래 두 스크립트가 빌드와 배포를 실행하게 된다. 배포전에는 빌드가 되어야 하므로 배포 스크립트에 빌드를 추가하였다. 스크립트가 없다면 <code>package.json</code>에 추가하면 된다.</p>\n<pre><code class=\"language-json\">// package.json\n{\n  \"scripts\": {\n    \"build\": \"gridsome build\",\n    \"deploy\": \"gridsome build &#x26;&#x26; gh-pages -d dist\",\n  },\n}\n</code></pre>\n<p>배포를 실행해보자.</p>\n<pre><code class=\"language-bash\">$ yarn deploy\n</code></pre>\n<p>정상적으로 배포가 완료되면 웹사이트에 접속하여 확인할 수 있다. (실시간으로 배포되지는 않지만 그리 오래 걸리지도 않는다.)</p>\n<p><img src=\"images/image-20201112190623964.png\" alt=\"image-20201112190623964\"></p>\n","cover_image":null}},"context":{}}